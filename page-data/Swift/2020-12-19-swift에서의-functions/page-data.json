{"componentChunkName":"component---src-templates-blog-post-js","path":"/Swift/2020-12-19-swift에서의-functions/","result":{"data":{"site":{"siteMetadata":{"title":"Noah's Dev Log","author":"[SeungHyun]","siteUrl":"https://noah0316.github.io","comment":{"disqusShortName":"","utterances":"noah0316/noah0316.github.io"},"sponsor":{"buyMeACoffeeId":"q6PBeY92M"}}},"markdownRemark":{"id":"55759a3f-e2cc-5dce-8439-fc2c62950738","excerpt":"…","html":"<p>이 글은 애플의 <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Functions.html\">스위프트 공식문서</a> 를 스터디하며 중간중간 저의 개인적인 생각을 덧 붙여 쓴 글 입니다.</p>\n<p>“함수란 특정 기능(작업)을 수행하는 코드의 집합이다.”</p>\n<p>함수를 선언할때는 <code class=\"language-text\">func</code> 키워드를 이용하여 선언하며 사용할때는 함수의 이름을 호출하여 사용해야한다.</p>\n<p>당연히 함수의 이름은 함수가 어떠한 기능을 수행하는지 다른 사람이 보아도 알 수 있게 직관적으로 표현 해주어야한다.\n<del>창작의 고통</del></p>\n<blockquote>\n<p>함수의 이름을 직관적으로 표현하고, 전반적인 코드의 가독성을 높이기 위해서는 (혹은 이름을 쉽게 짓기 위해서는 <del>창작의 고통ㅜㅜ…</del>) 함수가 될 수 있으면 한가지의 일만하도록 구성하게 하여 재사용성을 높이고, 유지보수가 용이하게 만드는 것이 좋다고 배웠으며, 또한 그렇게 생각한다.<br>\n이를 지켜가며 코드를 작성하면 무엇보다 나의 코드를 보게 될 나와, 미래의 팀원이 행복해질 것 같다.👨‍💻</p>\n<p>따라서 함수가 너무 많은 수의 인수를 필요로 하지는 않는지, 함수가 최대한 순수하게 한가지 일만 하도록 하게 하는 것을 지속적으로 고민해보는 연습이 필요할 것 같다.</p>\n</blockquote>\n<p>Swift에서의 모든 함수는 타입을 가지며 타입은 함수의 매개변수 타입, 반환타입으로 구성되어있다.</p>\n<p>이에 대해서는 조금 뒤에 더 자세히 알아보자.</p>\n<p>( Tip: Xcode에서 option key를 누르고 변수를 클릭하면 해당 변수의 타입을 확인 할 수 있다. )</p>\n<hr>\n<h2 id=\"defining-and-calling-functions---함수-정의와-호출\" style=\"position:relative;\"><a href=\"#defining-and-calling-functions---%ED%95%A8%EC%88%98-%EC%A0%95%EC%9D%98%EC%99%80-%ED%98%B8%EC%B6%9C\" aria-label=\"defining and calling functions   함수 정의와 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Defining and Calling Functions - 함수 정의와 호출</h2>\n<p>함수를 선언할 때는 가장 앞에 <code class=\"language-text\">func</code> 키워드를 붙이고 매개변수와 type을 다음과 같은 형태로<br>\n<code class=\"language-text\">(person: String)</code> 표현하고 함수의 반환 값이 있다면(String을 반환한다고 가정) <code class=\"language-text\">-&gt; String</code> 형태로<br>\n반환형을 정의한다.<br>\n이렇게 선언한 형태가 함수의 type이 된다. (매개변수의 type, 반환형의 type)</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> person <span class=\"token operator\">+</span> <span class=\"token string\">\"!\"</span>\n    <span class=\"token keyword\">return</span> greeting\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>정의한 함수에 인자 값을 넣어 호출하면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Anna\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"Hello, Anna!\"</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Brian\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"Hello, Brian!\"</span></code></pre></div>\n<p>greet함수를 더 축약해 만든다면</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">greetAgain</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello again, \"</span> <span class=\"token operator\">+</span> person <span class=\"token operator\">+</span> <span class=\"token string\">\"!\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이와 같다.</p>\n<blockquote>\n<p>이처럼 코드의 가독성을 해치지 않는 선에서 함수안의 코드를 간결하게 만드는 연습은<br>\n불필요한 변수할당과, logic을 줄이는데 많은 도움이 될 것 같다.<br>\n하지만 코드를 너무 과도하게 줄여 다른이가 코드를 보았을때</p>\n<p>해당 코드의 저의를 알아내기 위해 시간을 보다 많이 들여야한다면<br>\n협업의 관점으로 보았을때 좋은 코드라고 할 수 없을 것 같다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">greetAgain</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Anna\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"Hello again, Anna!\"</span></code></pre></div>\n<p>함수 호출부분은 이전과 달라지지 않았다.</p>\n<hr>\n<h2 id=\"function-parameters-and-return-values---함수-파라미터와-반환-값\" style=\"position:relative;\"><a href=\"#function-parameters-and-return-values---%ED%95%A8%EC%88%98-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0%EC%99%80-%EB%B0%98%ED%99%98-%EA%B0%92\" aria-label=\"function parameters and return values   함수 파라미터와 반환 값 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function Parameters and Return Values - 함수 파라미터와 반환 값</h2>\n<h3 id=\"functions-without-parameters-매개변수가-없는-함수\" style=\"position:relative;\"><a href=\"#functions-without-parameters-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EA%B0%80-%EC%97%86%EB%8A%94-%ED%95%A8%EC%88%98\" aria-label=\"functions without parameters 매개변수가 없는 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functions Without Parameters (매개변수가 없는 함수)</h3>\n<p>함수는 꼭 input parameter가 필요하지는 않다.</p>\n<p>지금 소개하는 함수는 input parameter가 없는 함수이며,<br>\n호출하면 언제나 똑같은 String 메시지를 반환하는 함수이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">sayHelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello, world\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"hello, world\"</span></code></pre></div>\n<h3 id=\"functions-with-multiple-parameters여러개의-매개변수를-가진-함수\" style=\"position:relative;\"><a href=\"#functions-with-multiple-parameters%EC%97%AC%EB%9F%AC%EA%B0%9C%EC%9D%98-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EB%A5%BC-%EA%B0%80%EC%A7%84-%ED%95%A8%EC%88%98\" aria-label=\"functions with multiple parameters여러개의 매개변수를 가진 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functions With Multiple Parameters(여러개의 매개변수를 가진 함수)</h3>\n<p>또한 함수는 여러개의 input parameter를 가질 수 있다. 여러개의 매개변수는 (,) 콤마를 이용해 구분한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> alreadyGreeted<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Bool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> alreadyGreeted <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">greetAgain</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">:</span> person<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 위에서 선언한 함수 호출</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">:</span> person<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 위에서 선언한 함수 호출</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Tim\"</span><span class=\"token punctuation\">,</span> alreadyGreeted<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"Hello again, Tim!\"</span></code></pre></div>\n<h3 id=\"functions-without-return-values반환값이-없는-함수\" style=\"position:relative;\"><a href=\"#functions-without-return-values%EB%B0%98%ED%99%98%EA%B0%92%EC%9D%B4-%EC%97%86%EB%8A%94-%ED%95%A8%EC%88%98\" aria-label=\"functions without return values반환값이 없는 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functions Without Return Values(반환값이 없는 함수)</h3>\n<p>다음 처럼 함수에서 반환값을 선언하지 않았다면 반환타입을 적어주지 않아도 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>person<span class=\"token delimiter variable\">)</span></span>!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Dave\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"Hello, Dave!\"</span></code></pre></div>\n<blockquote>\n<p>엄밀히 말하면 방금 선언한 greet함수는 반환 값이 있다. 반환 값을 선언하지 않았는데도??</p>\n<ul>\n<li>반환 타입이 정의 되지 않은 함수는 Void라는 특별한 type을 반환한다. 이는 ()와 같은 비어있는 튜플이다.</li>\n</ul>\n</blockquote>\n<p>함수의 반환 값은 다음과 같이 호출될때 무시될 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">printAndCount</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> string<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">printWithoutCounting</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token number\">_</span> <span class=\"token operator\">=</span> <span class=\"token function\">printAndCount</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">printAndCount</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token string\">\"hello, world\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// prints \"hello, world\" and returns a value of 12</span>\n<span class=\"token function\">printWithoutCounting</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token string\">\"hello, world\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// prints \"hello, world\" but does not return a value</span></code></pre></div>\n<p>첫번째 함수는 string을 출력하고 문자의 갯수를 반환한다.<br>\n두번째 함수는 첫번째 함수를 호출해 string을 출력하지만 첫번째 함수에서 받은 반환 값은 사용하지 않았다.</p>\n<blockquote>\n<p>함수의 반환 값은 무시될 수 있다.<br>\n하지만 값을 반환하는 함수는 항상 값을 반환하며 반환 타입이 명시된 함수에서 값을 반환하지 않는다면 compile-time에 error가 발생한다.</p>\n</blockquote>\n<h3 id=\"functions-with-multiple-return-values여러개의-값을-반환하는-함수\" style=\"position:relative;\"><a href=\"#functions-with-multiple-return-values%EC%97%AC%EB%9F%AC%EA%B0%9C%EC%9D%98-%EA%B0%92%EC%9D%84-%EB%B0%98%ED%99%98%ED%95%98%EB%8A%94-%ED%95%A8%EC%88%98\" aria-label=\"functions with multiple return values여러개의 값을 반환하는 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functions with Multiple Return Values(여러개의 값을 반환하는 함수)</h3>\n<p>반환 타입을 정의할때 튜플을 함수의 반환 타입으로 사용할 수 있다.<br>\n이 말인 즉슨 함수의 반환값으로 튜플을 반환할 수 있다는 뜻이다.</p>\n<p>다음 함수는 배열을 받은다음 배열에서 최소값과, 최대값을 튜플로 반환하는 함수이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">minMax</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> currentMin <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">var</span> currentMax <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>array<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> currentMin <span class=\"token punctuation\">{</span>\n            currentMin <span class=\"token operator\">=</span> value\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> value <span class=\"token operator\">></span> currentMax <span class=\"token punctuation\">{</span>\n            currentMax <span class=\"token operator\">=</span> value\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>currentMin<span class=\"token punctuation\">,</span> currentMax<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>반환된 두개의 Int를 가진 튜플은 다음처럼 접근자(.)를 이용해 값에 접근할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> bounds <span class=\"token operator\">=</span> <span class=\"token function\">minMax</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">109</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">71</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"min is <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>bounds<span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token delimiter variable\">)</span></span> and max is <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>bounds<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"min is -6 and max is 109\"</span></code></pre></div>\n<p>튜플의 멤버이름은 함수의 반환 타입을 지정할 때 다음과 같이 이미 지정되어<br>\n<code class=\"language-text\">-&gt; (min: Int, max: Int)</code><br>\n함수에서 튜플이 반환되는 지점에서 이름을 지정할 필요가 없다.</p>\n<h3 id=\"optional-tuple-return-types옵셔널-튜플-반환형\" style=\"position:relative;\"><a href=\"#optional-tuple-return-types%EC%98%B5%EC%85%94%EB%84%90-%ED%8A%9C%ED%94%8C-%EB%B0%98%ED%99%98%ED%98%95\" aria-label=\"optional tuple return types옵셔널 튜플 반환형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Optional Tuple Return Types(옵셔널 튜플 반환형)</h3>\n<p>함수에서 반환할 튜플 유형이 값이 없을 가능성이 있을때<br>\nOptional Tuple Return Type을 사용할 수 있다.</p>\n<p>Optional Tuple Return Type은 다음과 같이 사용할 수 있다.<br>\n<code class=\"language-text\">(Int, Int)?</code> or <code class=\"language-text\">(String, Int, Bool)?</code> 이는</p>\n<p><code class=\"language-text\">(Int?, Int?)</code> <code class=\"language-text\">(String?, Int?, Bool?)</code> 과는 다른 표현 방식이므로 유의해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">minMax</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> array<span class=\"token punctuation\">.</span><span class=\"token builtin\">isEmpty</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">nil</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> currentMin <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">var</span> currentMax <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>array<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> currentMin <span class=\"token punctuation\">{</span>\n            currentMin <span class=\"token operator\">=</span> value\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> value <span class=\"token operator\">></span> currentMax <span class=\"token punctuation\">{</span>\n            currentMax <span class=\"token operator\">=</span> value\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>currentMin<span class=\"token punctuation\">,</span> currentMax<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 함수는 두개의 Int값을 포함하는 튜플을 반환한다.<br>\n하지만 매개변수로 전달되는 배열에 대해 검사를 하지 않기 때문에 안전하지 않다.<br>\n비어있는 배열이 온다고 가정했을 때 minMax함수에서는 배열의 0번째 원소에 접근하고,<br>\n이때 런 타임에 에러가 발생할 것 이다.</p>\n<p>빈 배열이 오는 경우를 안전하게 처리하려면<br>\nOptional Tuple Return Type으로 minMax함수를 작성하고,<br>\n매개변수로 전달되는 배열이 비어있을 경우 nil값을 반환하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">minMax</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> array<span class=\"token punctuation\">.</span><span class=\"token builtin\">isEmpty</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">nil</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> currentMin <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">var</span> currentMax <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>array<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> currentMin <span class=\"token punctuation\">{</span>\n            currentMin <span class=\"token operator\">=</span> value\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> value <span class=\"token operator\">></span> currentMax <span class=\"token punctuation\">{</span>\n            currentMax <span class=\"token operator\">=</span> value\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>currentMin<span class=\"token punctuation\">,</span> currentMax<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 함수의 반환값을 확인하기 위해서는 다음처럼 if let과 같은 optional binding을 이용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> bounds <span class=\"token operator\">=</span> <span class=\"token function\">minMax</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">109</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">71</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"min is <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>bounds<span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token delimiter variable\">)</span></span> and max is <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>bounds<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Prints \"min is -6 and max is 109\"</span></code></pre></div>\n<h3 id=\"functions-with-an-implicit-return묵시적-반환이-있는-함수\" style=\"position:relative;\"><a href=\"#functions-with-an-implicit-return%EB%AC%B5%EC%8B%9C%EC%A0%81-%EB%B0%98%ED%99%98%EC%9D%B4-%EC%9E%88%EB%8A%94-%ED%95%A8%EC%88%98\" aria-label=\"functions with an implicit return묵시적 반환이 있는 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functions With an Implicit Return(묵시적 반환이 있는 함수)</h3>\n<p>함수의 전체 body가 하나의 표현식으로 되어있는 경우 함수는 묵시적으로 해당 표현식을 반환 값으로 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span> person<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> person <span class=\"token operator\">+</span> <span class=\"token string\">\"!\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Dave\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"Hello, Dave!\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">anotherGreeting</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span> person<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> person <span class=\"token operator\">+</span> <span class=\"token string\">\"!\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">anotherGreeting</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Dave\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"Hello, Dave!\"</span></code></pre></div>\n<p>다음처럼 하나의 표현식으로 작성되는 함수는 return 키워드를 생략할 수 있다.</p>\n<blockquote>\n<p>반환 타입을 생략하는 것은 아니니, 반환타입 마저 같이 생략하는 실수를 하지 않도록 주의!!</p>\n</blockquote>\n<hr>\n<h2 id=\"function-argument-labels-and-parameter-names---함수-인자-라벨과-파라미터-이름\" style=\"position:relative;\"><a href=\"#function-argument-labels-and-parameter-names---%ED%95%A8%EC%88%98-%EC%9D%B8%EC%9E%90-%EB%9D%BC%EB%B2%A8%EA%B3%BC-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%EC%9D%B4%EB%A6%84\" aria-label=\"function argument labels and parameter names   함수 인자 라벨과 파라미터 이름 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function Argument Labels and Parameter Names - 함수 인자 라벨과 파라미터 이름</h2>\n<p>함수 parameter에는 argument label과 parameter name이 있다.<br>\nargument label은 함수를 호출할 때 사용된다.</p>\n<p>parameter name은 함수를 구현할 때 즉, 함수 body에서 사용된다.<br>\n기본적으로 parameter는 parameter name을 argument label로 사용한다.</p>\n<p>코드로 이해해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">someFunction</span><span class=\"token punctuation\">(</span>firstParameterName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> secondParameterName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// In the function body, firstParameterName and secondParameterName</span>\n    <span class=\"token comment\">// refer to the argument values for the first and second parameters.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">someFunction</span><span class=\"token punctuation\">(</span>firstParameterName<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> secondParameterName<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 함수는 parameter name을 개발자가 직접 지정해주지 않은 경우이다.<br>\n이 경우에는 parameter name을 argument label로 사용하기 때문에<br>\n함수를 호출할때, 함수 내부에서 사용할때 같은 이름으로 사용한다.</p>\n<p>모든 파라미터에는 고유(unique)한 이름이 있어야한다.<br>\n여러 파라미터가 동일한 argument label을 가질 수 있지만 고유(unique)한 argument label은<br>\n코드의 가독성을 높인다.</p>\n<h3 id=\"specifying-argument-labels인자-라벨-지정\" style=\"position:relative;\"><a href=\"#specifying-argument-labels%EC%9D%B8%EC%9E%90-%EB%9D%BC%EB%B2%A8-%EC%A7%80%EC%A0%95\" aria-label=\"specifying argument labels인자 라벨 지정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Specifying Argument Labels(인자 라벨 지정)</h3>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">someFunction</span><span class=\"token punctuation\">(</span>argumentLabel parameterName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// In the function body, parameterName refers to the argument value</span>\n    <span class=\"token comment\">// for that parameter.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위처럼 paramter name 한칸의 공백(space) 앞에 argument label을 작성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> from hometown<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>person<span class=\"token delimiter variable\">)</span></span>!  Glad you could visit from <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>hometown<span class=\"token delimiter variable\">)</span></span>.\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Bill\"</span><span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Cupertino\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"Hello Bill!  Glad you could visit from Cupertino.\"</span></code></pre></div>\n<p>앞서 살펴보았던 greet함수에 argument label을 작성하면 위 처럼 사용할 수 있다.</p>\n<p>argument label을 사용하면 마치 문장을 사용하듯 함수를 호출 할 수 있고,<br>\n의도적으로 명확한 함수 본문을 제공할 수 있어 코드의 가독성을 높일 수 있다.</p>\n<h3 id=\"omitting-argument-labels인자-생략\" style=\"position:relative;\"><a href=\"#omitting-argument-labels%EC%9D%B8%EC%9E%90-%EC%83%9D%EB%9E%B5\" aria-label=\"omitting argument labels인자 생략 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Omitting Argument Labels(인자 생략)</h3>\n<p>argument label에 _(under score)를 사용하면 다음과 같이 함수를 호출 할 때<br>\nargument label을 사용하지 않고 호출 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">someFunction</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> firstParameterName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> secondParameterName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// In the function body, firstParameterName and secondParameterName</span>\n    <span class=\"token comment\">// refer to the argument values for the first and second parameters.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">someFunction</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> secondParameterName<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"default-parameter-values기본-파라미터-값\" style=\"position:relative;\"><a href=\"#default-parameter-values%EA%B8%B0%EB%B3%B8-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%EA%B0%92\" aria-label=\"default parameter values기본 파라미터 값 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Default Parameter Values(기본 파라미터 값)</h3>\n<p>함수의 parameter type 뒤에 값을 할당하여 parameter의 default value를 정의할 수 있다.<br>\nparameter의 default value가 정의되어 있다면 함수를 호출 할 때 해당 매개변수를 생략하고 호출 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">someFunction</span><span class=\"token punctuation\">(</span>parameterWithoutDefault<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> parameterWithDefault<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// If you omit the second argument when calling this function, then</span>\n    <span class=\"token comment\">// the value of parameterWithDefault is 12 inside the function body.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">someFunction</span><span class=\"token punctuation\">(</span>parameterWithoutDefault<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> parameterWithDefault<span class=\"token punctuation\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// parameterWithDefault is 6</span>\n<span class=\"token function\">someFunction</span><span class=\"token punctuation\">(</span>parameterWithoutDefault<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// parameterWithDefault is 12</span></code></pre></div>\n<p>default value가 없는 parameter들은 default value가 있는 parameter 앞에 배치해야 한다.</p>\n<blockquote>\n<p>default value를 가지지 않는 parameter가 일반적으로 함수의 의미상 더 중요하기 때문에 default value를 가지는 parameter 생략여부에 상관 없이, 같은 함수가 호출되는 것을 쉽게 알 수 있도록 default value를 가지지않는 parameter를 먼저 작성한다.</p>\n</blockquote>\n<h3 id=\"variadic-parameters가변-파라미터\" style=\"position:relative;\"><a href=\"#variadic-parameters%EA%B0%80%EB%B3%80-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0\" aria-label=\"variadic parameters가변 파라미터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Variadic Parameters(가변 파라미터)</h3>\n<p>Variadic Parameter는 지정된 타입의 0개 이상의 값을 허용한다.</p>\n<p>Variadic Parameter를 사용하면 함수를 호출할때 매개 변수에 다양한 수의 인자를(가변) 전달 할 수 있다.</p>\n<p>parameter의 타입 뒤에 마침표 3개(…)을 삽입하면 Varadic Parameter(가변 파라미터)를 작성 할 수 있다.</p>\n<p>Varadic Parameter에 전달 된 값은 함수 body안에서 해당 type에 맞는 배열로 사용할 수 있다.</p>\n<p>예를들어 Double… 타입의 Varadic Parameter는<br>\n[Double] type의 상수 배열로 함수 body내에서 사용되어진다.</p>\n<p>아래의 예는 Varadic Parameter로 받아온 숫자 목록의 길이에 상관없이 숫자 목록의 산술평균을 계산하는 예제이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">arithmeticMean</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> numbers<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Double</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> total<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> number <span class=\"token keyword\">in</span> numbers <span class=\"token punctuation\">{</span>\n        total <span class=\"token operator\">+</span><span class=\"token operator\">=</span> number\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> total <span class=\"token operator\">/</span> <span class=\"token function\">Double</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">arithmeticMean</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// returns 3.0, which is the arithmetic mean of these five numbers</span>\n<span class=\"token function\">arithmeticMean</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8.25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18.75</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// returns 10.0, which is the arithmetic mean of these three numbers</span></code></pre></div>\n<blockquote>\n<p>함수는 최대 하나의 Varadic Parameter를 가질 수 있다.</p>\n</blockquote>\n<h3 id=\"in-out-parameters\" style=\"position:relative;\"><a href=\"#in-out-parameters\" aria-label=\"in out parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>In-Out Parameters</h3>\n<p>함수의 parameter는 기본적으로 상수이다.<br>\n해당 함수의 본문 내에서 함수 parameter값을 변경하려고 하면 Compile-error가 발생한다.</p>\n<p>이는 실수로 parameter값을 변경하는 것을 미연에 방지하기 위한 일종의 안전장치이다.</p>\n<p>함수의 parameter값을 변경하고, 함수 호출이 끝난 뒤에도 유지되도록 하려면<br>\n해당 parameter를 in-out parameter로 정의하면 된다.</p>\n<p>parameter의 타입앞에 inout 키워드를 배치하여 in-out parameter를 작성할 수 있다.</p>\n<p>in-out parameter는 함수에 안쪽(in)으로 전달되는 값을 가지고 있고,<br>\n이는 함수에서 수정되고, original value를 교체하여 함수의 바깥(out)으로 전달된다.</p>\n<p>in-out parameter에 대한 인자는 변수로만 전달할 수 있다.<br>\n상수나, 리터럴은 수정할 수 없기 때문에 변수로만 전달 할 수 있다.</p>\n<p>함수에서 수정 될 수 있음을 나타내기 위해 in-out parameter에 인자를 전달할때 변수의 이름 앞에 <code class=\"language-text\">&amp;</code> 를 붙인다.</p>\n<blockquote>\n<p>in-out parameter는 default value를 가질 수 없고 vardic parameter(가변 매개변수)에는 inout 키워드를 사용할 수 없다.</p>\n</blockquote>\n<p>다음 예제는 a 와 b 두개의 Interger in-out parameter를 가지는 <code class=\"language-text\">swapTwoInts(_:_:)</code> 함수이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">swapTwoInts</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> a<span class=\"token punctuation\">:</span> <span class=\"token keyword\">inout</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">_</span> b<span class=\"token punctuation\">:</span> <span class=\"token keyword\">inout</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> temporaryA <span class=\"token operator\">=</span> a\n    a <span class=\"token operator\">=</span> b\n    b <span class=\"token operator\">=</span> temporaryA\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 함수는 b의 값을 a로, a의 값을 b로 바꾼다.</p>\n<p>Int type의 두 변수를 사용해 <code class=\"language-text\">swapTwoInts(_:_:)</code> 함수를 호출하면 두 변수의 값을 서로 바꿀 수 있다.</p>\n<blockquote>\n<p>함수를 호출할때 해당 변수의 참조주소(&#x26;)를 사용하여 호출하기 때문에<br>\n함수가 종료되어도 값이 다음과 같이 유지됨을 확인할 수 있다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> someInt <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">var</span> anotherInt <span class=\"token operator\">=</span> <span class=\"token number\">107</span>\n<span class=\"token function\">swapTwoInts</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>someInt<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>anotherInt<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"someInt is now <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>someInt<span class=\"token delimiter variable\">)</span></span>, and anotherInt is now <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>anotherInt<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"someInt is now 107, and anotherInt is now 3\"</span></code></pre></div>\n<blockquote>\n<p>in-out parameter를 사용한 위 예제는 함수의 반환 값을 사용하지 않고,<br>\n함수의 scope 바깥에 영향을 주었다.</p>\n</blockquote>\n<hr>\n<h2 id=\"function-types함수-타입\" style=\"position:relative;\"><a href=\"#function-types%ED%95%A8%EC%88%98-%ED%83%80%EC%9E%85\" aria-label=\"function types함수 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function Types(함수 타입)</h2>\n<p>함수는 항상 특정 type을 가지고 함수의 type은 parameter type과 반환 type으로 구성되어 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">addTwoInts</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">_</span> b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">multiplyTwoInts</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">_</span> b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 예제에서 사용된 두개의 함수는 두개의 Int type변수를 가지고 각각의 연산을 수행해 Int값을 반환한다.</p>\n<p>두 함수의 타입은 (Int, Int) -> Int 이다. 이는 다음과 같은 의미와 같다.</p>\n<p>“Int 타입의 두개의 parameter를 가지고, Int 타입의 값을 반환한다.”</p>\n<p>다음 예제는 parameter와 반환 값이 없는 예제이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">printHelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello, world\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 함수의 타입은 <code class=\"language-text\">() -&gt; Void</code> 이다. 이는 다음과 같은 의미와 같다.</p>\n<p>“parameter를 가지지 않으며, 반환 값을 가지지 않는다.”</p>\n<blockquote>\n<p>위에서 얘기했듯, 반환 타입이 정의 되지 않은 함수는 Void라는 특별한 type을 반환한다.<br>\n이는 ()와 같은 비어있는 튜플이다.</p>\n</blockquote>\n<h3 id=\"using-function-types-함수-타입-사용법\" style=\"position:relative;\"><a href=\"#using-function-types-%ED%95%A8%EC%88%98-%ED%83%80%EC%9E%85-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"using function types 함수 타입 사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Function Types (함수 타입 사용법)</h3>\n<p>Swift에서는 다른 모든 타입처럼 함수의 타입을 사용한다.<br>\n예를들어, 함수 타입으로 상수, 변수를 정의할 수 있고 변수에 적절한 함수를 할당할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> mathFunction<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> addTwoInts</code></pre></div>\n<p>위 표현식의 의미는 다음과 같다.</p>\n<p>“두개의 Int parameter를 가지고, Int를 반환하는 함수 타입을 가진 mathFunction 변수를 선언하고 addTwoInts라는 함수를 참조하라!”</p>\n<p>addTwoInts 함수는 mathFunction과 같은 타입을 가지고 있기 때문에<br>\nSwift의 type-checker에 의해 할당이 허용되었다.</p>\n<p>위처럼 할당한 이후에는 mathFunction이라는 이름으로 다음과 같이 함수를 호출 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Result: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span><span class=\"token function\">mathFunction</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"Result: 5\"</span></code></pre></div>\n<p>동일한 타입을 가진 다른 함수를 같은 변수에 다음과 같이 할당 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">mathFunction <span class=\"token operator\">=</span> multiplyTwoInts\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Result: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span><span class=\"token function\">mathFunction</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"Result: 6\"</span></code></pre></div>\n<p>다른 타입과 마찬가지로 함수를 상수 또는 변수에 할당 할때<br>\n함수 타입을 선언하지 않아도 Swift가 함수의 타입을 추론하여 함수 할당 여부를 결정해 할당한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> anotherMathFunction <span class=\"token operator\">=</span> addTwoInts\n<span class=\"token comment\">// anotherMathFunction is inferred to be of type (Int, Int) -> Int</span></code></pre></div>\n<h3 id=\"function-types-as-parameter-types파라미터-타입으로써의-함수-타입\" style=\"position:relative;\"><a href=\"#function-types-as-parameter-types%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C%EC%8D%A8%EC%9D%98-%ED%95%A8%EC%88%98-%ED%83%80%EC%9E%85\" aria-label=\"function types as parameter types파라미터 타입으로써의 함수 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function Types as Parameter Types(파라미터 타입으로써의 함수 타입)</h3>\n<p>parameter에 <code class=\"language-text\">(Int, Int) -&gt; Int</code> 와 같은 함수 type을 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">printMathResult</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> mathFunction<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">_</span> a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">_</span> b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Result: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span><span class=\"token function\">mathFunction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">printMathResult</span><span class=\"token punctuation\">(</span>addTwoInts<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"Result: 8\"</span></code></pre></div>\n<p>다음과 같이 parameter에 함수 type을 사용함으로써<br>\n함수를 호출할때 Argument로써 함수를 전달할 수 있다.</p>\n<h3 id=\"function-types-as-return-types반환-타입으로써의-함수-타입\" style=\"position:relative;\"><a href=\"#function-types-as-return-types%EB%B0%98%ED%99%98-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C%EC%8D%A8%EC%9D%98-%ED%95%A8%EC%88%98-%ED%83%80%EC%9E%85\" aria-label=\"function types as return types반환 타입으로써의 함수 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function Types as Return Types(반환 타입으로써의 함수 타입)</h3>\n<p>함수의 반환타입으로 함수 타입을 사용할 수 있다.</p>\n<p>이는 함수에서 함수를 반환 할 수 있음을 의미한다.</p>\n<p>다음 두개의 함수는 입력한 step에 하나를 더하거나 빼는 함수이다.<br>\n(두 함수 모두 <code class=\"language-text\">(Int) -&gt; Int</code>타입이다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">stepForward</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> input<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> input <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">stepBackward</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> input<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> input <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음 함수는 삼항 연산자를 이용하여 True, False를 Argument로 전달받아,<br>\n위에서 선언한 적절한 함수를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">chooseStepFunction</span><span class=\"token punctuation\">(</span>backward<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Bool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> backward <span class=\"token operator\">?</span> stepBackward <span class=\"token punctuation\">:</span> stepForward\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 <code class=\"language-text\">chooseStepFunction(backword:)</code>함수를 사용한 예를 보자</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> currentValue <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">let</span> moveNearerToZero <span class=\"token operator\">=</span> <span class=\"token function\">chooseStepFunction</span><span class=\"token punctuation\">(</span>backward<span class=\"token punctuation\">:</span> currentValue <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// moveNearerToZero now refers to the stepBackward() function</span></code></pre></div>\n<p><code class=\"language-text\">currentValue</code>가 0보다 크기 때문에 Argument로 true를 전달해<br>\n<code class=\"language-text\">moveNearerToZero</code> 상수에는<code class=\"language-text\">chooseStepFunction(backword:)</code> 에서 반환된 <code class=\"language-text\">stepBackward(_:)</code> 함수에 대한 참조값이 할당 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Counting to zero:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Counting to zero:</span>\n<span class=\"token keyword\">while</span> currentValue <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>currentValue<span class=\"token delimiter variable\">)</span></span>... \"</span><span class=\"token punctuation\">)</span>\n    currentValue <span class=\"token operator\">=</span> <span class=\"token function\">moveNearerToZero</span><span class=\"token punctuation\">(</span>currentValue<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zero!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 3...</span>\n<span class=\"token comment\">// 2...</span>\n<span class=\"token comment\">// 1...</span>\n<span class=\"token comment\">// zero!</span></code></pre></div>\n<p>위 처럼 코드를 작성하면 <code class=\"language-text\">moveNearerToZero</code>가 적절한 함수를 참조하여 <code class=\"language-text\">currentValue</code>가 0이 될때 까지 작동한다.</p>\n<hr>\n<h2 id=\"nested-functions---중첩-함수\" style=\"position:relative;\"><a href=\"#nested-functions---%EC%A4%91%EC%B2%A9-%ED%95%A8%EC%88%98\" aria-label=\"nested functions   중첩 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nested Functions - 중첩 함수</h2>\n<p>지금 까지 살펴보았던 함수들은 global(전역)으로 정의된 global(전역)함수이다.</p>\n<p>함수의 body안에 함수를 정의할 수 있는데 이를 중첩 함수(Nested Function)이라고 한다.</p>\n<p>중첩 함수는 함수의 scope에 의해서 외부에서는 접근할 수 없지만<br>\n이를 감싸고 있는 함수 body내에서는 접근, 호출이 가능하다.</p>\n<p>위에서 살펴보았던 <code class=\"language-text\">chooseStepFunction(backword:)</code>을 중첩함수를 이용해 다시 작성하면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">chooseStepFunction</span><span class=\"token punctuation\">(</span>backward<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Bool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function\">stepForward</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> input <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function\">stepBackward</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> input <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> backward <span class=\"token operator\">?</span> stepBackward <span class=\"token punctuation\">:</span> stepForward\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> currentValue <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span>\n<span class=\"token keyword\">let</span> moveNearerToZero <span class=\"token operator\">=</span> <span class=\"token function\">chooseStepFunction</span><span class=\"token punctuation\">(</span>backward<span class=\"token punctuation\">:</span> currentValue <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// moveNearerToZero now refers to the nested stepForward() function</span>\n<span class=\"token keyword\">while</span> currentValue <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>currentValue<span class=\"token delimiter variable\">)</span></span>... \"</span><span class=\"token punctuation\">)</span>\n    currentValue <span class=\"token operator\">=</span> <span class=\"token function\">moveNearerToZero</span><span class=\"token punctuation\">(</span>currentValue<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zero!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// -4...</span>\n<span class=\"token comment\">// -3...</span>\n<span class=\"token comment\">// -2...</span>\n<span class=\"token comment\">// -1...</span></code></pre></div>\n<hr>\n<p>지금까지 살펴본 바에 의하면 Swift에서는<br>\n함수를 변수, 상수에 할당, 함수에 함수를 파라미터로 전달하는 행위가 가능했다.</p>\n<p>이러한 행위가 가능한 이유는 Swift와 같은 현대프로그래밍 언어들에서는 함수가 일급함수로써 취급되기 때문이다.</p>\n<p>(Swift - 일급함수에 대한 자세한 내용에 대해서는 다음번 <a href=\"https://noah0316.github.io/Swift/2021-02-09-swift%EC%9D%98-%ED%95%A8%EC%88%98%EB%8A%94-%EC%9D%BC%EA%B8%89%ED%95%A8%EC%88%98%EC%9D%B8%EA%B0%80/\">포스트</a>에서 다루도록 하겠습니다.👨‍💻 )</p>\n<blockquote>\n<p>참조 : <a href=\"https://docs.swift.org/swift-book/LanguageGuide/Functions.html\">애플 스위프트 공식문서</a>\n,</p>\n<p><a href=\"https://jusung.gitbook.io/the-swift-language-guide/language-guide/06-functions\">https://jusung.gitbook.io/the-swift-language-guide/language-guide/06-functions</a></p>\n</blockquote>","frontmatter":{"title":"Swift에서의 Functions","date":"December 19, 2020"}}},"pageContext":{"slug":"/Swift/2020-12-19-swift에서의-functions/","previous":{"fields":{"slug":"/JavaScript/2020-11-04-temporal-dead-zone,-hoisting에-관하여/"},"frontmatter":{"title":"Temporal Dead Zone, Hoisting에 관하여","category":"JavaScript","draft":false}},"next":{"fields":{"slug":"/Swift/2020-12-24-xcode-extension에-contribute를-하다니!!/"},"frontmatter":{"title":"Xcode Extension에 contribute를 하다니!!","category":"Swift","draft":false}}}}}