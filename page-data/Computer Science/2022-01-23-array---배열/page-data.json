{"componentChunkName":"component---src-templates-blog-post-js","path":"/Computer Science/2022-01-23-array---배열/","result":{"data":{"site":{"siteMetadata":{"title":"Noah's Dev Log","author":"[SeungHyun]","siteUrl":"https://noah0316.github.io","comment":{"disqusShortName":"","utterances":"noah0316/noah0316.github.io"},"sponsor":{"buyMeACoffeeId":"noah0316"}}},"markdownRemark":{"id":"3fce0fb0-c832-5c68-bbb5-8a14e3c20b62","excerpt":"안녕하세요 Noah입니다 :) 오늘은 Swift의 자료구조 중 배열에 대해 알아보도록 하겠습니다😀 배열은 메모리 영역에 연속되어있는 데이터 구조로 논리적인 순서와 물리적인 순서가 같다는 특징을 가지고 있습니다. 배열은 특정 요소의 조회가 아주 빠르다는 특징을 가지고 있습니다. 특정 요소를 조회할 때 순회(traversing)하는 것이 아니라, 배열의 특징중 하나인 논리적인 순서(index)와 물리적인 순서(메모리 주소)가 같다는 특징을 이용해 index…","html":"<p>안녕하세요 Noah입니다 :)</p>\n<p>오늘은 Swift의 자료구조 중 배열에 대해 알아보도록 하겠습니다😀</p>\n<p>배열은 메모리 영역에 연속되어있는 <strong>데이터 구조</strong>로 논리적인 순서와 물리적인 순서가 같다는 특징을 가지고 있습니다.</p>\n<p>배열은 특정 요소의 조회가 아주 빠르다는 특징을 가지고 있습니다.</p>\n<p>특정 요소를 조회할 때 순회(traversing)하는 것이 아니라,</p>\n<p>배열의 특징중 하나인 논리적인 순서(index)와 물리적인 순서(메모리 주소)가 같다는 특징을 이용해</p>\n<p>index를 사용하여 특정 요소를 조회하면(random access) 조회의 시간복잡도가 O(1)이기 때문에\n조회가 아주 빠르다는 특징을 가지고 있습니다.</p>\n<blockquote>\n<p>특정한 메모리 주소 값에 바로 접근하는 것을 random access라고 합니다.</p>\n</blockquote>\n<p>추가 및 삭제는 개념적인 배열이라면 중간에 추가할 때 맨 뒤에 공간을 더 만들고 하나씩 밀어야합니다.</p>\n<p>삭제도 마찬가지로 중간에 있는 요소 하나를 삭제한다면 중간에 빠진 게 없도록 다시 밀어줘야 합니다.</p>\n<p>따라서 배열은 중간에 값을 생략하거나 건너뛰는 경우는 없습니다.</p>\n<p>즉 배열은 조회는 빠르지만, 추가 및 삭제는 느리다는 특징을 가지고 있음을 위에서 살펴본 내용을 통해 알 수 있습니다.</p>\n<p>Swift의 배열이 가지는 특징은 다음과 같습니다.</p>\n<ul>\n<li>배열에 저장할 요소의 타입에는 제약이 없지만, 하나의 배열에 저장하는 아아템 타입은 모두 같아야 함</li>\n<li>선언 시 배열에 저장할 요소의 타입을 명확히 정의해야 함</li>\n<li>배열의 크기는 동적으로 확장할 수 있음</li>\n</ul>\n<p>Swift에서는 배열을 정적(Static)인 방식과 동적(Dynamic)인 방식으로 배열을 선언 및 초기화할 수 있습니다.</p>\n<ul>\n<li>정적인 방식</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> cities <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Seoul\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"New York\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"LA\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Santiago\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p><code class=\"language-text\">cities</code> 라는 상수는 타입 추론에 의해 String 요소를 가지는 배열 객체가 됩니다.</p>\n<ul>\n<li>동적인 방식</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> cities <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>배열을 사용할 때 주의해야 할 점은 배열의 범위를 벗어난 영역에 접근하는 경우를 주의해야 합니다.</p>\n<p>만약 배열의 범위를 벗어난 영역에 접근할 경우 다음과 같은 에러를 마주하게 됩니다.</p>\n<p><strong><code class=\"language-text\">Fatal error: Index out of range</code></strong></p>\n<p>말 그대로 치명적인 에러인데요, 만약 App에서 이러한 에러가 발생하게 되면 그 즉시 앱이 강제종료(크래시)되는 상황이 발생하게 됩니다.</p>\n<p>이와 같은 에러를 마주하지 않게 하기 위해서는 index가 Array의 유효한 bound안에 있는지 확인하는 습관을 지녀야 할 것 같습니다.</p>\n<p>Swift에서는 다음과 같은 extension을 통해 bound를 check하고 안전하게 배열을 사용할 수 있는데요,</p>\n<h3 id=\"swift-언어의-안전성의-기본-바탕이-되는-optional을-이용해\" style=\"position:relative;\"><a href=\"#swift-%EC%96%B8%EC%96%B4%EC%9D%98-%EC%95%88%EC%A0%84%EC%84%B1%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EB%B0%94%ED%83%95%EC%9D%B4-%EB%90%98%EB%8A%94-optional%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%B4\" aria-label=\"swift 언어의 안전성의 기본 바탕이 되는 optional을 이용해 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Swift 언어의 안전성의 기본 바탕이 되는 Optional을 이용해</h3>\n<h3 id=\"다음과-같은-extension을-구성할-수-있습니다\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%9D%8C%EA%B3%BC-%EA%B0%99%EC%9D%80-extension%EC%9D%84-%EA%B5%AC%EC%84%B1%ED%95%A0-%EC%88%98-%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"다음과 같은 extension을 구성할 수 있습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다음과 같은 extension을 구성할 수 있습니다.</h3>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token builtin\">Array</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">subscript</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">safe</span> index<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Element</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">indices</span> <span class=\"token operator\">~</span><span class=\"token operator\">=</span> index <span class=\"token operator\">?</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token constant\">nil</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>이제 다음으로 Apple Developer 문서에 나온 Array를 번역해보며</p>\n<p>Swift Array의 특성에 대해 알아보도록 하겠습니다.</p>\n<h1 id=\"apple-developer-documentation---array\" style=\"position:relative;\"><a href=\"#apple-developer-documentation---array\" aria-label=\"apple developer documentation   array permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Apple Developer Documentation - Array</h1>\n<h2 id=\"arrays\" style=\"position:relative;\"><a href=\"#arrays\" aria-label=\"arrays permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Arrays</h2>\n<p>An ordered, random-access collection.</p>\n<h2 id=\"declaration\" style=\"position:relative;\"><a href=\"#declaration\" aria-label=\"declaration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Declaration</h2>\n<p><code class=\"language-text\">@frozen struct Array&lt;Element&gt;</code></p>\n<h2 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h2>\n<p>배열은 앱에서 가장 일반적으로 사용되는 데이터 타입 중 하나입니다.</p>\n<p>배열은 앱의 데이터를 구성하는 데 사용합니다.</p>\n<p>배열은 정수, 문자열, 클래스 등 모든 종류의 Type을 저장할 수 있습니다.</p>\n<blockquote>\n<p>배열에 저장할 요소의 타입에는 제약이 없지만,\n하나의 배열에 저장하는 요소의 타입은 모두 같아야 합니다.</p>\n</blockquote>\n<p>Swift는 배열 리터럴을 사용하여 배열을 쉽게 만들 수 있습니다.\nSwift는 지정된 값이 포함된 배열을 작성하여 배열의 요소 유형을 자동으로 추론합니다.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// An array of 'Int' elements</span>\n<span class=\"token keyword\">let</span> oddNumbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// An array of 'String' elements</span>\n<span class=\"token keyword\">let</span> streets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Albemarle\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Brandywine\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Chesapeake\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>선언에 배열의 요소 타입을 지정하여 빈 배열을 작성할 수 있습니다.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// Shortened forms are preferred</span>\n<span class=\"token keyword\">var</span> emptyDoubles<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Double</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// The full type name is also allowed</span>\n<span class=\"token keyword\">var</span> emptyFloats<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Float</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>고정된 수의 default value로 미리 초기화된 배열이 필요한 경우 <code class=\"language-text\">Array(repeating:count:)</code>\n이니셜라이저를 사용합니다.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> digitCounts <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>repeating<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">count</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>digitCounts<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\"</span></code></pre></div>\n<h2 id=\"accessing-array-values\" style=\"position:relative;\"><a href=\"#accessing-array-values\" aria-label=\"accessing array values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Accessing Array Values</strong></h2>\n<p>배열의 모든 요소에 대해 작업을 수행해야 하는 경우 for-in loop를 사용하여 배열의 내용을 반복합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">for</span> street <span class=\"token keyword\">in</span> streets <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I don't live on <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>street<span class=\"token delimiter variable\">)</span></span>.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Prints \"I don't live on Albemarle.\"</span>\n<span class=\"token comment\">// Prints \"I don't live on Brandywine.\"</span>\n<span class=\"token comment\">// Prints \"I don't live on Chesapeake.\"</span></code></pre></div>\n<p><code class=\"language-text\">isEmpty</code> 속성을 사용하여 배열에 요소가 있는지 확인하거나,\n카운트 속성을 사용하여 배열의 요소 수를 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> oddNumbers<span class=\"token punctuation\">.</span><span class=\"token builtin\">isEmpty</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I don't know any odd numbers.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I know <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>oddNumbers<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span><span class=\"token delimiter variable\">)</span></span> odd numbers.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Prints \"I know 8 odd numbers.\"</span></code></pre></div>\n<p>배열의 첫 번째 및 마지막 요솟값에 안전하게 액세스하려면 <code class=\"language-text\">first</code> , <code class=\"language-text\">last</code> 속성을 사용합니다.\n배열이 비어 있으면 이러한 속성은 <code class=\"language-text\">nil</code>입니다</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> firstElement <span class=\"token operator\">=</span> oddNumbers<span class=\"token punctuation\">.</span><span class=\"token builtin\">first</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">let</span> lastElement <span class=\"token operator\">=</span> oddNumbers<span class=\"token punctuation\">.</span><span class=\"token builtin\">last</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>firstElement<span class=\"token punctuation\">,</span> lastElement<span class=\"token punctuation\">,</span> separator<span class=\"token punctuation\">:</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Prints \"1, 15\"</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>emptyDoubles<span class=\"token punctuation\">.</span><span class=\"token builtin\">first</span><span class=\"token punctuation\">,</span> emptyDoubles<span class=\"token punctuation\">.</span><span class=\"token builtin\">last</span><span class=\"token punctuation\">,</span> separator<span class=\"token punctuation\">:</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"nil, nil\"</span></code></pre></div>\n<p><code class=\"language-text\">subscript</code>를 통해 개별 배열 요소에 접근할 수 있습니다.\n비어 있지 않은 배열의 첫 번째 요소의 인덱스 항상 0입니다.\n배열 요소의 count보다 크거나 같은 인덱스 또는 음수 인덱스를 사용하면 런타임 오류가 발생합니다.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>oddNumbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> oddNumbers<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> separator<span class=\"token punctuation\">:</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"1, 7\"</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>emptyDoubles<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Triggers runtime error: Index out of range</span></code></pre></div>\n<h2 id=\"adding-and-removing-elements\" style=\"position:relative;\"><a href=\"#adding-and-removing-elements\" aria-label=\"adding and removing elements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Adding and Removing Elements</strong></h2>\n<p>강의 중인 수업에 등록한 학생 이름 목록을 저장해야 한다고 해봅시다.\n등록 기간 동안 학생들이 수업을 추가 및 삭제함에 따라 이름을 추가 및 삭제해야 하는 기능을 지원해야 한다고 가정해봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> students <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Ben\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ivy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jordell\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>배열의 끝에 단일 요소를 추가하려면 <code class=\"language-text\">append(_:)</code> 메서드를 사용합니다.</p>\n<p>배열의 끝에 여러 요소를 동시에 추가하려면 <code class=\"language-text\">append(contentsOf:)</code> 메서드에 다른 배열 또는 임의의 시퀀스를 전달하여 여러 요소를 동시에 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">students<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Maxime\"</span><span class=\"token punctuation\">)</span>\nstudents<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>contentsOf<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Shakia\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"William\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [\"Ben\", \"Ivy\", \"Jordell\", \"Maxime\", \"Shakia\", \"William\"]</span></code></pre></div>\n<p>배열의 중간에 단일 요소를 삽입하려면 <code class=\"language-text\">insert(_:at:)</code> 메소드를 사용하고, 배열의 중간에 다른 컬렉션, 배열 리터럴을 삽입하려면 <code class=\"language-text\">insert(contentsOf:at:)</code> 메소드를 사용합니다.\n해당 인덱스와 이후 인덱스의 요소는 공간을 확보하기 위해 다시 이동됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">students<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Liam\"</span><span class=\"token punctuation\">,</span> at<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [\"Ben\", \"Ivy\", \"Jordell\", \"Liam\", \"Maxime\", \"Shakia\", \"William\"]</span></code></pre></div>\n<p>배열에서 요소를 제거하려면 <code class=\"language-text\">remove(at:)</code>, <code class=\"language-text\">removeSubrange(_:)</code> 및 <code class=\"language-text\">removeLast()</code> 메서드를 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// Ben's family is moving to another state</span>\nstudents<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>at<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [\"Ivy\", \"Jordell\", \"Liam\", \"Maxime\", \"Shakia\", \"William\"]</span>\n\n<span class=\"token comment\">// William is signing up for a different class</span>\nstudents<span class=\"token punctuation\">.</span><span class=\"token function\">removeLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [\"Ivy\", \"Jordell\", \"Liam\", \"Maxime\", \"Shakia\"]</span></code></pre></div>\n<p>새로운 값을 <code class=\"language-text\">subscript</code>에 할당하여 기존 요소를 새로운 값으로 바꿀 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">firstIndex</span><span class=\"token punctuation\">(</span>of<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Maxime\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Max\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// [\"Ivy\", \"Jordell\", \"Liam\", \"Max\", \"Shakia\"]</span></code></pre></div>\n<h2 id=\"growing-the-size-of-an-array\" style=\"position:relative;\"><a href=\"#growing-the-size-of-an-array\" aria-label=\"growing the size of an array permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Growing the Size of an Array</strong></h2>\n<p>모든 배열은 콘텐츠를 저장하기 위해 일정량의 메모리를 예약합니다.\n요소를 배열에 추가하고 해당 배열이 예약된 용량을 초과하기 시작하면 배열은 더 큰 메모리 영역을 할당하고,\n해당 요소를 새 스토리지에 복사합니다.\n새 스토리지는 이전 스토리지 크기의 배수입니다.</p>\n<blockquote>\n<p>Array Doubling과 관련 있습니다.\n<a href=\"https://zeddios.tistory.com/62\">https://zeddios.tistory.com/62</a> 이 글을 같이 읽어보시면 도움이 될 것입니다!</p>\n</blockquote>\n<p>이러한 기하급수적인 growth 전략은 요소를 추가하는 작업이 일정한 시간 내에 수행되어 많은 추가 작업의 성능을 평균화합니다.\n재할당을 트리거 하는 추가 작업은 성능비용이 발생하지만 배열이 커질수록 발생하는 빈도는 점점 줄어듭니다.</p>\n<blockquote>\n<p>하지만, 우리는 일반적으로 용량에 대해 걱정할 필요가 없어요.\nSwift는 효율적인 재할당기법을 사용하기 때문에 재할당은 거의 성능 문제가 되지 않습니다:)</p>\n</blockquote>\n<p>저장해야 할 요소의 개수를 대략적으로 알고 있는 경우 중간에 재할당하는 것을 피하기 위해\n배열에 추가하기 전에 <code class=\"language-text\">reserveCapacity(_:)</code> 메서드를사용하십시오.\n<code class=\"language-text\">capacity</code> 및 <code class=\"language-text\">count</code> 속성을 사용하여 배열이 더 큰 스토리지를 할당하지 않고 저장할 수 있는 요소의 수를 결정합니다.</p>\n<p>여기서 말하는 스토리지는 연속적인 메모리 블록입니다.\nElement Type이 클래스 또는 @objc 프로토콜 유형인 배열의 경우 이 저장소는 메모리의 연속 블록 또는 NSArray 인스턴스가 될 수 있습니다.\nNSArray의 임의의 하위 클래스는 배열이 될 수 있기 때문에 이 경우 representation이나 효율성에 대한 보장은 없습니다.</p>\n<h2 id=\"modifying-copies-of-arrays\" style=\"position:relative;\"><a href=\"#modifying-copies-of-arrays\" aria-label=\"modifying copies of arrays permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Modifying Copies of Arrays</strong></h2>\n<p>각 배열에는 모든 요소의 값이 포함된 independent value가 있습니다.</p>\n<p>즉, integer와 같은 단순 type의 경우 한 배열에서 값을 변경할 때</p>\n<p>해당 요소의 값은 배열의 복사본에서 변경되지 않습니다.</p>\n<blockquote>\n<p>Value Type의 특성과 같네요!</p>\n</blockquote>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> numbersCopy <span class=\"token operator\">=</span> numbers\nnumbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"[100, 2, 3, 4, 5]\"</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>numbersCopy<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"[1, 2, 3, 4, 5]\"</span></code></pre></div>\n<p>배열의 요소들이 클래스의 인스턴스라면, 처음에는 다르게 보일지라도 semantics는 동일하다.</p>\n<blockquote>\n<p>semantics는 문장이나 단위프로그램을<br>\n컴퓨터에서 실행한 효과를 명세하여 문장이나 프로그램의 의미를 서술한 것을 말한다.</p>\n</blockquote>\n<blockquote>\n<ul>\n<li><strong>3학년 2학기 프로그래밍언어 수업 中</strong></li>\n</ul>\n</blockquote>\n<p>이 경우 배열에 저장된 값은 배열 외부에 있는 객체에 대한 참조입니다.\n한 배열의 객체에 대한 참조를 변경하면 해당 배열만 새 객체에 대한 참조를 갖게 됩니다.\n그러나 두 배열에 동일한 객체에 대한 참조가 포함되어 있으면</p>\n<p>두 배열에서 해당 개체의 속성이 변경되는 것을 관찰할 수 있습니다.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// An integer type with reference semantics</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">IntegerReference</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> firstIntegers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token function\">IntegerReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">IntegerReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> secondIntegers <span class=\"token operator\">=</span> firstIntegers\n\n<span class=\"token comment\">// Modifications to an instance are visible from either array</span>\nfirstIntegers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>secondIntegers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"100\"</span>\n\n<span class=\"token comment\">// Replacements, additions, and removals are still visible</span>\n<span class=\"token comment\">// only in the modified array</span>\nfirstIntegers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">IntegerReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>firstIntegers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"10\"</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>secondIntegers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Prints \"100\"</span></code></pre></div>\n<p>표준 라이브러리의 모든 가변 크기 컬렉션과 마찬가지로 배열도 <strong>copy-on-write</strong> 최적화를 사용합니다.\n배열의 여러 복사본은 복사본 중 하나를 수정할 때까지 동일한 스토리지를 공유합니다.</p>\n<p>이 경우 수정 중인 배열은 스토리지를 고유하게 소유한 자체 복사본으로 교체한 다음 해당 위치에서 수정됩니다.</p>\n<p>복사본의 양을 줄일 수 있는 최적화 기능이 적용되기도 합니다.</p>\n<p>즉, 배열이 다른 복사본과 스토리지를 공유하는 경우 해당 어레이의 첫 번째 mutating 작업에서 어레이를 복사하는 비용이 발생합니다.\n스토리지의 유일한 소유자인 배열은 해당 스토리지에서 변경 작업을 수행할 수 있습니다.</p>\n<p>아래의 예에서 <code class=\"language-text\">numbers</code> 배열이 동일한 스토리지를 공유하는 복사본 두 개와 함께 생성됩니다.\noriginal <code class=\"language-text\">numbers</code> 배열이 수정되면 수정하기 전에 저장소의 고유한 복사본을 만듭니다.\n두 복사본이 original 스토리지를 계속 공유하는 동안 <code class=\"language-text\">numbers</code>를 추가로 수정합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> firstCopy <span class=\"token operator\">=</span> numbers\n<span class=\"token keyword\">var</span> secondCopy <span class=\"token operator\">=</span> numbers\n\n<span class=\"token comment\">// The storage for 'numbers' is copied here</span>\nnumbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\nnumbers<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\nnumbers<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">300</span>\n<span class=\"token comment\">// 'numbers' is [100, 200, 300, 4, 5]</span>\n<span class=\"token comment\">// 'firstCopy' and 'secondCopy' are [1, 2, 3, 4, 5]</span></code></pre></div>\n<h2 id=\"bridging-between-array-and-nsarray\" style=\"position:relative;\"><a href=\"#bridging-between-array-and-nsarray\" aria-label=\"bridging between array and nsarray permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Bridging Between Array and NSArray</strong></h2>\n<p>Array 대신 NSArray 인스턴스에 데이터가 필요한 API에 액세스해야 하는 경우 type-cast 연산자(as)를 사용하여 인스턴스를 브리지합니다.</p>\n<p>브릿징이 가능하려면 배열의 요소 유형이 클래스, @objc 프로토콜(Object-C에서 가져오거나 @objc 특성으로 표시된 프로토콜) 또는 Foundation 유형으로 브리지되는 유형이어야 합니다.</p>\n<p>다음 예에서는 어레이 인스턴스를 NSArray에 브리지하여 <code class=\"language-text\">write(to:atomically:)</code> 메소드를 사용하는 방법을 보여 줍니다.\n이 예에서 색상 배열은 <code class=\"language-text\">colors</code> 배열의 문자열 요소가 NSString에 브리지되기 때문에\nNSArray에 브리지될 수 있습니다.\n반면 컴파일러는 <code class=\"language-text\">moreColors</code> 배열의 요소 type이 Foundation 형식으로 브리지되지 않는 <code class=\"language-text\">Optional&lt;String&gt;</code>이기 때문에 <code class=\"language-text\">moreColors</code> 배열의 브릿징을 방지합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"periwinkle\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rose\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"moss\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> moreColors<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token operator\">?</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ochre\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pine\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>fileURLWithPath<span class=\"token punctuation\">:</span> <span class=\"token string\">\"names.plist\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span>colors <span class=\"token keyword\">as</span> <span class=\"token builtin\">NSArray</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">:</span> url<span class=\"token punctuation\">,</span> atomically<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// true</span>\n\n<span class=\"token punctuation\">(</span>moreColors <span class=\"token keyword\">as</span> <span class=\"token builtin\">NSArray</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">:</span> url<span class=\"token punctuation\">,</span> atomically<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// error: cannot convert value of type '[String?]' to type 'NSArray'</span></code></pre></div>\n<p>배열의 요소가 이미 클래스의 인스턴스 또는 @objc 프로토콜인 경우 Array에서 NSAray로 브릿징하려면\nO(1) 시간과 O(1) 공간이 필요합니다.\n그렇지 않으면 O(n) 시간과 공간이 필요합니다.</p>\n<p>destination 배열의 요소 type이 클래스 또는 @objc 프로토콜인 경우 NSArray에서 Array로 브릿징하면 먼저 <code class=\"language-text\">copy(with:)(- copyWithZone: in Objective-C)</code> 메소드를 호출하여 배열에서 immutable(불변) 복사본을 얻은 후 O(1) 시간이 걸리는 Swift bookkeeping작업을 추가로 수행합니다.</p>\n<p>이미 immutable(불변)인 NSArray 인스턴스의 경우, <code class=\"language-text\">copy(with:)</code>는 일반적으로 O(1) 시간 내에 동일한 배열을 반환합니다.\n<code class=\"language-text\">copy(with:)</code>가 동일한 어레이를 반환하는 경우 NSArray 및 Array 인스턴스는 어레이의 두 인스턴스가 스토리지를 공유할 때 사용되는 것과 동일한 Copy-on-write 최적화를 사용하여 스토리지를 공유합니다.</p>\n<p>destination 어레이의 요소 유형이 Foundation 유형에 브리지되는 non-class type인 경우 NSArray에서 어레이로 브릿징되는 요소는 O(n) 시간 내에 인접 스토리지에 브릿징 복사를 수행합니다.\n예를 들어 <code class=\"language-text\">NSArray</code>에서 <code class=\"language-text\">Array&lt;Int&gt;</code>로의 브릿징은 이러한 복사를 수행합니다.\nArray 인스턴스의 요소에 액세스할 때 추가 브릿징이 필요하지 않습니다.</p>\n<blockquote>\n<p>ContinuousArray 및 ArraySlice 유형은 브리지되지 않으며, 이러한 type의 인스턴스는 항상 연속적인 메모리 블록을 스토리지로 사용합니다.</p>\n</blockquote>\n<p><em>아직 모르는 것이 많고 알아가는 과정입니다. 잘못된 것이 있다면 댓글로 남겨주신다면 감사하겠습니다!</em>😊</p>\n<blockquote>\n<p>참고</p>\n<ul>\n<li><a href=\"http://minsone.github.io/programming/check-index-of-array-in-swift\">안전하게 배열 조회하기- 민소네님</a></li>\n<li><a href=\"http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&#x26;mallGb=KOR&#x26;barcode=9791186710234\">꼼꼼한 재은씨의 Swift 문법편</a></li>\n<li><a href=\"https://developer.apple.com/documentation/swift/array\">Swift Array - Apple Devleoper Documentation</a></li>\n<li><a href=\"https://zeddios.tistory.com/117\">Array. count? capacity? - ZeddiOS님</a></li>\n</ul>\n</blockquote>","frontmatter":{"title":"Array - 배열","date":"January 23, 2022"}}},"pageContext":{"slug":"/Computer Science/2022-01-23-array---배열/","previous":{"fields":{"slug":"/Design Pattern/observer-pattern/"},"frontmatter":{"title":"Observer Pattern","category":"Design Pattern","draft":false}},"next":{"fields":{"slug":"/Computer Science/2022-03-31-git의-commit-id는-어떻게-생성될까(feat.블록체인-트랜잭션id)/"},"frontmatter":{"title":"Git의 commit id는 어떻게 생성될까?","category":"Computer Science","draft":false}}}}}