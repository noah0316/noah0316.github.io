{"componentChunkName":"component---src-templates-blog-post-js","path":"/Computer Science/array---배열/","result":{"data":{"site":{"siteMetadata":{"title":"Noah's Dev Log","author":"[SeungHyun]","siteUrl":"https://noah0316.github.io","comment":{"disqusShortName":"","utterances":"noah0316/noah0316.github.io"},"sponsor":{"buyMeACoffeeId":"noah0316"}}},"markdownRemark":{"id":"2a6ae7e1-9680-5360-911d-dfa0d4ea6bf5","excerpt":"Array 배열은 메모리 영역에 연속되어있는 데이터 구조로 논리적인 순서와 물리적인 순서가 같다는 특징을 가지고 있습니다. 배열은 특정 요소의 조회가 아주 빠르다는 특징을 가지고 있습니다. 특정 요소를 조회할 때 순회(traversing)하는 것이 아니라, 특정한 메모리 주소 값에 바로 접근하는 것을 random access라고 합니다. 배열의 특징중 하나인 논리적인 순서(index)와 물리적인 순서(메모리 주소)가 같다는 특징을 이용해 index를 사용하여 특정 요소를 조회하면(random…","html":"<h1 id=\"array\" style=\"position:relative;\"><a href=\"#array\" aria-label=\"array permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array</h1>\n<p>배열은 메모리 영역에 연속되어있는 <strong>데이터 구조</strong>로 논리적인 순서와 물리적인 순서가 같다는 특징을 가지고 있습니다.</p>\n<p>배열은 특정 요소의 조회가 아주 빠르다는 특징을 가지고 있습니다.</p>\n<p>특정 요소를 조회할 때 순회(traversing)하는 것이 아니라,</p>\n<p>특정한 메모리 주소 값에 바로 접근하는 것을 random access라고 합니다.</p>\n<p>배열의 특징중 하나인 논리적인 순서(index)와 물리적인 순서(메모리 주소)가 같다는 특징을 이용해</p>\n<p>index를 사용하여 특정 요소를 조회하면(random access) 조회의 시간복잡도가 O(1)이기 때문에\n조회가 아주 빠르다는 특징을 가지고 있습니다.</p>\n<p>추가 및 삭제는 개념적인 배열이라면 중간에 추가할 때 맨 뒤에 공간을 더 만들고 하나씩 밀어야합니다.</p>\n<p>삭제도 마찬가지로 중간에 있는 요소 하나를 삭제한다면 중간에 빠진 게 없도록 다시 밀어줘야 합니다.</p>\n<p>따라서 배열은 중간에 값을 생략하거나 건너뛰는 경우는 없습니다.</p>\n<p>즉 배열은 조회는 빠르지만, 추가 및 삭제는 느리다는 특징을 가지고 있음을 위에서 살펴본 내용을 통해 알 수 있습니다.</p>\n<p>Swift의 배열이 가지는 특징은 다음과 같습니다.</p>\n<ul>\n<li>배열에 저장할 요소의 타입에는 제약이 없지만, 하나의 배열에 저장하는 아아템 타입은 모두 같아야 함</li>\n<li>선언 시 배열에 저장할 요소의 타입을 명확히 정의해야 함</li>\n<li>배열의 크기는 동적으로 확장할 수 있음</li>\n</ul>\n<p>Swift에서는 배열을 정적(Static)인 방식과 동적(Dynamic)인 방식으로 배열을 선언 및 초기화할 수 있습니다.</p>\n<p>정적인 방식</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> cities <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Seoul\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"New York\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"LA\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Santiago\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p><code class=\"language-text\">cities</code> 배열은 타입 추론에 의해 String 요소를 가지는 배열 객체가 됩니다.</p>\n<p>동적인 방식</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> cities <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>배열을 사용할 때 주의해야 할 점은 배열의 범위를 벗어난 영역에 접근하는 경우를 주의해야 합니다.</p>\n<p>만약 배열의 범위를 벗어난 영역에 접근할 경우 다음과 같은 에러를 마주하게 됩니다.</p>\n<p><strong><code class=\"language-text\">Fatal error: Index out of range</code></strong></p>\n<p>말 그대로 치명적인 에러인데요, 만약 App에서 이러한 에러가 발생하게 되면 그 즉시 앱이 강제종료(크래시)되는 상황이 발생하게 됩니다.</p>\n<p>이와 같은 에러를 마주하지 않게 하기 위해서는 index가 Array의 유효한 bound안에 있는지 확인하는 습관을 지녀야 할 것 같습니다.</p>\n<p>Swift에서는 다음과 같은 extension을 통해 bound를 check하고 안전하게 배열을 사용할 수 있는데요,</p>\n<p>Swift 언어의 안전성의 기본 바탕이 되는 Optional을 이용해 다음과 같은 extension을 구성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">extension</span> <span class=\"token builtin\">Array</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">subscript</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">safe</span> index<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Element</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">indices</span> <span class=\"token operator\">~</span><span class=\"token operator\">=</span> index <span class=\"token operator\">?</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token constant\">nil</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>아직 모르는 것이 많고 알아가는 과정입니다. 잘못된 것이 있다면 댓글로 남겨주신다면 감사하겠습니다!</em>😊</p>\n<blockquote>\n<p>참고</p>\n<ul>\n<li><a href=\"http://minsone.github.io/programming/check-index-of-array-in-swift\">안전하게 배열 조회하기- 민소네님</a></li>\n<li><a href=\"http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&#x26;mallGb=KOR&#x26;barcode=9791186710234\">꼼꼼한 재은씨의 Swift 문법편</a></li>\n<li><a href=\"https://developer.apple.com/documentation/swift/array\">Swift Array 공식문서</a></li>\n</ul>\n</blockquote>","frontmatter":{"title":"Array - 배열","date":"January 27, 2022"}}},"pageContext":{"slug":"/Computer Science/array---배열/","previous":{"fields":{"slug":"/Design Pattern/observer-pattern/"},"frontmatter":{"title":"Observer Pattern","category":"Design Pattern","draft":false}},"next":null}}}