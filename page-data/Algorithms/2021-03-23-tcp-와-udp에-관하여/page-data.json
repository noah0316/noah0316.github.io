{"componentChunkName":"component---src-templates-blog-post-js","path":"/Algorithms/2021-03-23-tcp-와-udp에-관하여/","result":{"data":{"site":{"siteMetadata":{"title":"Noah's Dev Log","author":"[SeungHyun]","siteUrl":"https://noah0316.github.io","comment":{"disqusShortName":"","utterances":"noah0316/noah0316.github.io"},"sponsor":{"buyMeACoffeeId":"q6PBeY92M"}}},"markdownRemark":{"id":"189f2023-5b11-5ae1-a7cf-0a8959b34aac","excerpt":"안녕하세요 :) Noah입니다. 오늘은 TCP와 UDP의 통신방식에 관한 얘기를 나눠볼까 합니다.\n인간사회에 여러 가지 규칙이나 규약이 있듯, 컴퓨터 네트워크 분야에도 여러 가지 규약이 있습니다. 이러한 규약을 정하는 기관 중 국제표준화기구(ISO)에서 통신이 일어나는 과정을 단계별로 쉽게 파악하고, 다른 시스템 간의 원활한 통신을 위해 제안한 통신규약인 OSI 7 Layer Model은 위의 그림과 같습니다. \n TCP, UDP에 대해 알아보기 전에…","html":"<p align=\"center\">\n<img src=\"assets/2021-03-25/1.png\" width=\"300\"/>\n<center>OSI7 Layer Model</center>\n</p>\n<h3 id=\"안녕하세요--noah입니다\" style=\"position:relative;\"><a href=\"#%EC%95%88%EB%85%95%ED%95%98%EC%84%B8%EC%9A%94--noah%EC%9E%85%EB%8B%88%EB%8B%A4\" aria-label=\"안녕하세요  noah입니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>안녕하세요 :) Noah입니다.</h3>\n<p>오늘은 TCP와 UDP의 통신방식에 관한 얘기를 나눠볼까 합니다.\n인간사회에 여러 가지 규칙이나 규약이 있듯, 컴퓨터 네트워크 분야에도 여러 가지 규약이 있습니다.<br>\n이러한 규약을 정하는 기관 중 국제표준화기구(ISO)에서 통신이 일어나는 과정을 단계별로 쉽게 파악하고,</p>\n<p>다른 시스템 간의 원활한 통신을 위해 제안한 통신규약인 OSI 7 Layer Model은 위의 그림과 같습니다.<br>\n<br>\n<br></p>\n<h4 id=\"tcp-udp에-대해-알아보기-전에\" style=\"position:relative;\"><a href=\"#tcp-udp%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0-%EC%A0%84%EC%97%90\" aria-label=\"tcp udp에 대해 알아보기 전에 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TCP, UDP에 대해 알아보기 전에</h4>\n<p>4계층에 해당하는 전송계층을 더 자세히 알아보겠습니다.</p>\n<p>전송계층에서는 source to destination, end-to-end간 연결을 제공하며,<br>\n오류 제어, 흐름 제어, 데이터 순서화 등의 기능을 제공합니다.</p>\n<p>여기서 말하는 end-to-end란 단순히 컴퓨터에서 컴퓨터로 만의 전달이 아닌,<br>\n송신 컴퓨터의 응용프로그램(프로세스)에서 최종 수신 컴퓨터의 응용프로그램(프로세스)으로의<br>\n전달을 의미합니다.</p>\n<p>전송계층에서의 주소 표현은 포트 번호를 사용하는데,<br>\n포트 번호는 통신 프로세스를 구별하는 번호입니다.</p>\n<p>또한, 전송계층에서의 프로토콜 데이터 단위(PDU)는 세그먼트라고 하며,<br>\n전송계층에서는 신뢰성 관련 제어기능을 지원할 수도 있고, 안할수도 있습니다.</p>\n<p>이제 TCP, UDP에 대해 알아봅시다😎</p>\n<h3 id=\"tcp에-관하여\" style=\"position:relative;\"><a href=\"#tcp%EC%97%90-%EA%B4%80%ED%95%98%EC%97%AC\" aria-label=\"tcp에 관하여 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TCP에 관하여</h3>\n<hr>\n<p>TCP(Transmission Control Protocol)를 한마디로 정의하자면<br>\n신뢰성있는 데이터 통신을 가능하게 해주는 프로토콜입니다.</p>\n<p>TCP의 가장 중요한 특징 중 하나는 Connection을 수립하는 과정입니다.</p>\n<p>(Connection Establish) 이에 관해서는 3-way-handshake라는 과정이 존재하는데,<br>\n이에 관해서는 잠시 후에 살펴보도록 하겠습니다.</p>\n<p>다른 특징으로 TCP는 데이터의 순차 전송을 보장하며,<br>\n흐름 제어, 혼잡 제어, 오류 감지가 가능하다는 특징을 가지고 있습니다.\n<br>\n<br></p>\n<p align=\"center\">\n<img src=\"assets/2021-03-25/2.png\" width=\"600\"/>\n<center>TCP 헤더<center>\n</p>\n<p>전송계층에서는 포트 번호로 통신을 합니다.</p>\n<p>따라서 TCP header에는 Source port와 destination port가 존재하고,<br>\n순차 전송의 신뢰성을 보장하기 위해 Sequence number, Acknowledge number가 존재하고,<br>\nflag field는 tcp의 연결을 제어하고, 데이터 관리를 하기 위해 존재합니다.</p>\n<p>flag field중 크게 3가지만 먼저 알아보면 SYN은 연결을 요청할 때 쓰이는 flag,<br>\nFIN은 연결을 종료할 때 쓰는 flag, ACK는 응답을 잘 받았음을 알려주기 위한 flag입니다.</p>\n<p>이에 대한 자세한 내용은 3-way-handshake를 살펴보며 더 자세히 알아보겠습니다.</p>\n<h4 id=\"3-way-handshake\" style=\"position:relative;\"><a href=\"#3-way-handshake\" aria-label=\"3 way handshake permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-way-handshake</h4>\n<hr>\n<br>\n<p align=\"center\">\n<img src=\"assets/2021-03-25/3.png\" width=\"400\"/><center>3-way handshake</center>\n</p>\n<br>\n<p>3-way-handshake란 Connection을 수립하는 과정입니다.</p>\n<p>Client에서 Server에 연결을 신청을 할 때 SYN을 1로 설정해 송신을 한 뒤에<br>\nServer에서 받으면 요청을 잘 받았다는 의미로 ACK를 1로 설정해 송신합니다.</p>\n<p>Connection은 양방향이기 때문에 서버 역시 연결을 요청한다는 의미로 ACK와 함께<br>\nSYN을 1로 설정해 송신합니다.<br>\nClient도 요청을 잘 받았다는 의미로 ACK를 1로 설정해 다시 송신하면 Connection이 수립됩니다.</p>\n<p>Connection이 수립된 이후에 데이터 송수신을 크게 3단계로 보면</p>\n<ol>\n<li>Client가 데이터를 송신한다.</li>\n<li>Server에서 잘 수신 했다면 ACK를 송신한다.</li>\n<li>Client가 대기하다가 ACK를 수신하지 못하면 재전송을 한다.</li>\n</ol>\n<p>이러한 일련의 과정을 통해 TCP는 TCP의 장점인 신뢰성 있는 통신을 구현합니다.</p>\n<h4 id=\"4-way-handshake\" style=\"position:relative;\"><a href=\"#4-way-handshake\" aria-label=\"4 way handshake permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4-way-handshake</h4>\n<hr>\n<p align=\"center\">\n<img src=\"assets/2021-03-25/4.png\" width=\"300\"/>\n<center>4-way handshake </center>\n</p>\n<p>Connection이 수립(establish) 되었다면 Connection을 닫는 과정도 필요합니다.</p>\n<ol>\n<li>Client에서 더 이상 보낼 데이터가 없으면 FIN을 1로 설정하여 Server에게 송신한다.</li>\n<li>Server에서는 잘 수신 받았다는 의미로 ACK를 1로 설정하여 클라이언트에게 송신한다.</li>\n<li>Connection을 수립할때와는 다르게 Server쪽에서 아직 보낼 데이터가 남아있을 수도 있기 때문에<br>\n잠시 대기후 Server쪽에서 데이터를 모두 전달했다면 FIN을 1로 설정해 Client 쪽으로 송신한다.</li>\n<li>Client에서 잘 수신을 받았으면 ACK를 1로 설정해 Server에게 송신하면 상태가 Closed 된다.</li>\n</ol>\n<p>이러한 단계를 통해 TCP의 Connection을 Close합니다.</p>\n<p>TCP의 단점으로는 매번 Connection을 3-way-handshake로 연결하기 때문에 시간 손실이 발생하고,<br>\n조금만 세그먼트를 손실해도 재전송을 한다는 점입니다.</p>\n<p>e-mail과 같이 손실이 없어야 하는 데이터의 경우 이러한 과정이 장점이 될 수 있지만<br>\n실시간 스트리밍과 같이 손실이 어느정도 발생해도 되는 데이터의 경우에는 비효율적인 통신 방법이 될 수 있다는 점을 주의해야합니다.</p>\n<h3 id=\"udp에-관하여\" style=\"position:relative;\"><a href=\"#udp%EC%97%90-%EA%B4%80%ED%95%98%EC%97%AC\" aria-label=\"udp에 관하여 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UDP에 관하여</h3>\n<hr>\n<p>UDP(User Datagram Protocol)를 한마디로 정의하면 TCP보다 신뢰성이 떨어지지만 전송 속도가<br>\n일반적으로 빠른 프로토콜이라 할 수 있습니다.</p>\n<p>Connection을 TCP처럼 수립하지 않고,<br>\n비연결 방식으로 통신을 하며 TCP의 주요기능인 순차 전송, 흐름 제어, 혼잡 제어 기능을 제공하지 않으며, Checksum을 통해 최소한의 에러검출을 진행합니다.</p>\n<p>주로 데이터의 신뢰성이 중요하지 않을 때 사용됩니다.(ex. 실시간 스트리밍)</p>\n<p align=\"center\">\n<img src=\"assets/2021-03-25/5.png\" width=\"600\"/>\n<center> UDP 헤더  </center>\n</p>\n<p>UDP헤더의 경우 TCP헤더 보다 비교적 단순합니다.</p>\n<p>포트 번호로 통신을 하기위한 Source port와 destination port가 존재하고,<br>\n에러 검출을 위한 Checksum이 존재합니다.<br>\n<br></p>\n<p align=\"center\">\n<img src=\"assets/2021-03-25/6.png\" width=\"300\"/>\n<center> UDP 통신과정 </center>\n</p>\n<p>UDP의 데이터 전송 방식은 Connection이 없으니 확인을 하지 않고,<br>\n무조건 데이터를 요청 하면 보내는 방식입니다.</p>\n<p>Server는 UDP 관련해 소켓을 열어두고 있어 데이터를 요청 하기만 하면 무조건 받습니다.<br>\n또한 Checksum을 이용해 최소한의 오류만을 검증하기 때문에 패킷의 손실이 상대적으로 많습니다.</p>\n<p>그렇기에 TCP와 비교하여 신뢰성 있는 데이터의 전송을 보장할 수 없습니다.</p>\n<p>또한, 앞서 언급된 Client와 Server는 모두 end-system이며 동시에 host입니다.</p>\n<h3 id=\"tcp와-udp-비교\" style=\"position:relative;\"><a href=\"#tcp%EC%99%80-udp-%EB%B9%84%EA%B5%90\" aria-label=\"tcp와 udp 비교 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TCP와 UDP 비교</h3>\n<hr>\n<p>TCP와 UDP의 특징을 표로 비교하여 한눈에 쉽게 알아보려 합니다.</p>\n<table>\n<thead>\n<tr>\n<th>구분</th>\n<th>TCP</th>\n<th>UDP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>연결 수립</td>\n<td>연결 지향형</td>\n<td>비 연결형</td>\n</tr>\n<tr>\n<td>신뢰성, 승인</td>\n<td>모든 데이터에 신뢰성, 승인 제공</td>\n<td>모든 데이터에 신뢰성, 승인 제공</td>\n</tr>\n<tr>\n<td>재전송</td>\n<td>모든 데이터를 관리해 자동적으로 재전송</td>\n<td>탐지 후 필요한 경우에만 수동적으로 재전송</td>\n</tr>\n<tr>\n<td>흐름 제어</td>\n<td>제공</td>\n<td>미제공</td>\n</tr>\n<tr>\n<td>손실</td>\n<td>없음</td>\n<td>손실 발생 가능성 있음</td>\n</tr>\n<tr>\n<td>속도</td>\n<td>상대적으로 느리다.</td>\n<td>상대적으로 빠르다.</td>\n</tr>\n<tr>\n<td>용도</td>\n<td>신뢰할 수 있는 방법으로 전송해야 하는 곳에 적합</td>\n<td>데이터의 완전성보다 전달 속도가 중요한 곳에 적합</td>\n</tr>\n</tbody>\n</table>\n<br>\n<p>표를 통해 전송계층 프로토콜을 선택할 때 TCP, UDP의 특성을 파악하고,<br>\n상황에 따라 적절한 프로토콜을 사용해야 한다는 사실을 도출할 수 있습니다.</p>\n<p>이외에도 차세대 전송계층 프로토콜로는 SCTP, RSVP 구글에서 개발한 QUIC, 등이 있습니다.</p>\n<p>혹시 제가 잘못 알고 있는 부분이 있거나, 오타 혹은 궁금한 점 있으시면 댓글로 알려주시면 감사하겠습니다!!😎</p>\n<br>\n<blockquote>\n<p>도움을 주신 분</p>\n<ul>\n<li>명지대 컴퓨터공학과 박현민 교수님</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>참고</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=ikDVGYp5dhg\">우아한 Tech 👨‍🏫 르윈의 TCP UDP</a></li>\n</ul>\n</blockquote>\n<blockquote>\n<p>이미지 출처</p>\n<ul>\n<li><a href=\"https://netchobo.tistory.com/44\">OSI 7 Layer Model</a></li>\n<li><a href=\"https://hand-over.tistory.com/15\">TCP 헤더</a></li>\n<li><a href=\"https://www.luxoft-training.com/news/building-java-client-server-applications-with-tcp\">3-way handshake</a></li>\n<li><a href=\"https://steffen-lee.tistory.com/31\">4-way-handshake</a></li>\n<li><a href=\"https://rednooby.tistory.com/17\">UDP 헤더</a></li>\n<li><a href=\"https://coconuts.tistory.com/33\">UDP 통신과정</a></li>\n</ul>\n</blockquote>","frontmatter":{"title":"TCP와 UDP에 관하여","date":"March 25, 2021"}}},"pageContext":{"slug":"/Algorithms/2021-03-23-tcp-와-udp에-관하여/","previous":{"fields":{"slug":"/Swift/2021-02-09-swift의-함수는-일급함수인가/"},"frontmatter":{"title":"Swift의 함수는 일급함수인가?","category":"Swift","draft":false}},"next":{"fields":{"slug":"/Computer Science/2021-03-23-tcp-와-udp에-관하여/"},"frontmatter":{"title":"TCP와 UDP에 관하여","category":"Computer Science","draft":false}}}}}