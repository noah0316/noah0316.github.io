{"componentChunkName":"component---src-templates-blog-post-js","path":"/Algorithms/2021-07-05-selection-sort/","result":{"data":{"site":{"siteMetadata":{"title":"Noah's Dev Log","author":"[SeungHyun]","siteUrl":"https://noah0316.github.io","comment":{"disqusShortName":"","utterances":"noah0316/noah0316.github.io"},"sponsor":{"buyMeACoffeeId":"noah0316"}}},"markdownRemark":{"id":"4515be58-02b6-5499-9f1d-2ed9a4fb3fc5","excerpt":"안녕하세요 Noah입니다 :) 본격적으로 장마가 시작되나 봅니다~ 다들 우산 챙겨 다니세요!!☂️ 오늘은 정렬 알고리즘에 대해 알아보려 합니다. Computer Science에서의 정렬 알고리즘은 item을 번호순이나 사전 순으로 일정한 순서대로 열거하는 알고리즘입니다. Swift에서는 간단하게 sort() 메소드 혹은 sorted…","html":"<p>안녕하세요 Noah입니다 :)<br>\n본격적으로 장마가 시작되나 봅니다~ 다들 우산 챙겨 다니세요!!☂️</p>\n<p>오늘은 <strong>정렬 알고리즘</strong>에 대해 알아보려 합니다.</p>\n<p><strong>Computer Science</strong>에서의 정렬 알고리즘은 item을 번호순이나 사전 순으로 일정한 순서대로<br>\n열거하는 알고리즘입니다.</p>\n<p><strong>Swift</strong>에서는 간단하게 <strong>sort()</strong> 메소드 혹은 <strong>sorted()</strong> 메소드를 이용해 데이터를 정렬하곤 했었습니다.<br>\n이 메소드들도 내부적으로는 정렬 알고리즘을 이용해 데이터를 정렬합니다.</p>\n<p><strong>어떠한 정렬 알고리즘</strong>을 쓰느냐에 따라 데이터를 처리하는 데 드는 시간이 좌우됩니다.\n따라서 <strong>주어진 데이터의 특성</strong>에 맞는 정렬 알고리즘을 사용하는 게 중요해 보입니다.</p>\n<p>여러 정렬 알고리즘이 있지만, <strong>Sorting 알고리즘 톺아보기 1부</strong>에서는<br>\n선택 정렬, 삽입 정렬, 거품 정렬에 대해 알아보고,</p>\n<p><strong>Sorting 알고리즘 톺아보기 2부</strong>에서는 조금 더 <strong>난이도가 있는 Sorting 알고리즘</strong>에 대해 살펴보겠습니다😄</p>\n<p>이번 포스트는 가장 작은 숫자부터 높은 숫자까지 정렬되는 <strong>오름차순</strong>으로 설명을 진행하도록 하겠습니다.</p>\n<h2 id=\"selection-sort\" style=\"position:relative;\"><a href=\"#selection-sort\" aria-label=\"selection sort permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Selection Sort</h2>\n<p>먼저 Selection Sort가 데이터를 정렬하는 모습부터 먼저 살펴보겠습니다.</p>\n<p align=\"center\">\n<img src=\"/2bdd6b162c403d376c56c02e8a5560af/1.gif\" width=\"300\">\n</p><center>Selection Sort</center>\n<p></p>\n<p>애니메이션만 봐도 뭔가 순차적으로 정렬되는 듯한 모습이 보입니다.</p>\n<p><strong>Selection Sort</strong>는 데이터를 하나하나 보면서 가장 작은 숫자를 찾고,<br>\n만약 <strong>가장 작은 숫자</strong>를 찾았다면 해당 숫자를 아직 위치가 확정되지 않은 아이템 중 가장 앞에 위치한<br>\n아이템과 바꿉니다.(Swap)</p>\n<h4 id=\"선택정렬-순서\" style=\"position:relative;\"><a href=\"#%EC%84%A0%ED%83%9D%EC%A0%95%EB%A0%AC-%EC%88%9C%EC%84%9C\" aria-label=\"선택정렬 순서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>선택정렬 순서</h4>\n<ol>\n<li>주어진 데이터 중 최소 값을 찾는다.</li>\n<li>그 값을 맨 앞에 위치한 값과 바꾼다.</li>\n<li>맨 처음 위치를 뺀 나머지 데이터를 같은 방법으로 교체한다.</li>\n</ol>\n<p>따라서 가장 작은 숫자를 찾기 때문에 <strong>가장 작은 숫자</strong>부터 <strong>차례대로</strong> <strong>최종 위치</strong>가 <strong>확정</strong>됩니다.</p>\n<p><strong>Swift</strong>에서 배열의 특정 위치 값을 swap 할 때 사용하는 <strong>swapAt()</strong> 메소드를 이용해<br>\n<strong>Selection sort</strong>를 구현해보도록 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">Foundation</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">selectionSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> array<span class=\"token punctuation\">:</span> <span class=\"token keyword\">inout</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>array<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">min</span> <span class=\"token operator\">=</span> i\n        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>array<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">[</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token builtin\">min</span> <span class=\"token operator\">=</span> j\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        array<span class=\"token punctuation\">.</span><span class=\"token function\">swapAt</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\n<span class=\"token function\">selectionSort</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>array<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></code></pre></div>\n<p>위의 <code class=\"language-text\">array</code>가 정렬되는 모습은 다음과 같습니다.<br>\ninner loop를 순회하면서 <strong>가장 작은 값의 인덱스</strong>를 <code class=\"language-text\">min</code>이라는 변수가 저장하고 있다가,</p>\n<p>반복문의 순회가 끝나면 <strong>swapAt()메소드</strong>를 이용해<br>\nouter loop의 현재 index의 item과 <strong>swap</strong>을 진행합니다.</p>\n<br>\n<p align=\"center\">\n<img src=\"/f20b8898585b3ca03843d93ce2c35a68/2.gif\" width=\"100\" height=\"371\">\n</p><center>Simulation</center>\n<p></p>\n<blockquote>\n<p>빨간색으로 표시된 부분이 현재 가장 작은 값이며,<br>\n노란색으로 표시된 부분은 위치가 확정된 아이템입니다.<br>\n파란색으로 표시된 부분은 현재 아이템입니다.</p>\n</blockquote>\n<p><strong>Outer loop</strong>의 첫 번째 item을 가장 작은 숫자로 가정하고 순회를 합니다.<br>\n<strong>Outer loop 순회 범위</strong> : 0 to 배열 길이 - 1</p>\n<p>Outer loop를 한번 순회할 때 마다 <strong>Inner loop</strong>를 한 번씩 순회합니다.<br>\n<strong>Inner loop 순회 범위</strong> : outer loop의 현재 index + 1 to 배열 길이 - 1</p>\n<p>따라서 <strong>Selection Sort</strong>의 <strong>시간 복잡도</strong>는 다음과 같습니다.</p>\n<ul>\n<li>Best : O(n^2)</li>\n<li>Worst : O(n^2)</li>\n<li>Average : O(n^2)</li>\n</ul>\n<p>네, 여기까지 Sorting 알고리즘 톺아보기 1부 Selection Sort였습니다 😄</p>\n<p>혹시 제가 잘못 알고 있는 부분이 있거나, 오타 혹은 궁금한 점 있으시면 댓글로 알려주시면 감사하겠습니다!!😎</p>\n<blockquote>\n<p>참고</p>\n<ul>\n<li><a href=\"https://ko.wikipedia.org/wiki/%EC%84%A0%ED%83%9D_%EC%A0%95%EB%A0%AC\">위키 백과 선택 정렬</a></li>\n</ul>\n</blockquote>\n<blockquote>\n<p>이미지 출처</p>\n<ul>\n<li><a href=\"https://ko.wikipedia.org/wiki/%EC%84%A0%ED%83%9D_%EC%A0%95%EB%A0%AC\">선택 정렬 애니메이션</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Selection_sort\">선택 정렬 시뮬레이션</a></li>\n</ul>\n</blockquote>\n<blockquote>\n<p>관련 포스트</p>\n<ul>\n<li><a href=\"https://noah0316.github.io/Algorithms/2021-07-19-quick-sort(%ED%80%B5-%EC%A0%95%EB%A0%AC)/\">Swift Quick Sort(퀵 정렬)</a></li>\n<li><a href=\"https://noah0316.github.io/Algorithms/2021-07-16-merge-sort(%ED%95%A9%EB%B3%91%EC%A0%95%EB%A0%AC)/\">Swift Merge Sort(합병정렬)</a></li>\n<li><a href=\"https://noah0316.github.io/Algorithms/2021-07-08-insertion-sort/\">Swift Insertion Sort(삽입정렬)</a></li>\n<li><a href=\"https://noah0316.github.io/Algorithms/2021-07-07-bubble-sort/\">Swift Bubble Sort(거품정렬)</a></li>\n</ul>\n</blockquote>","frontmatter":{"title":"Swift Selection Sort(선택정렬)","date":"July 05, 2021"}}},"pageContext":{"slug":"/Algorithms/2021-07-05-selection-sort/","previous":{"fields":{"slug":"/Swift/2021-07-04-apple이-새로-공개한-오픈소스-swift-컬렉션-패키지/"},"frontmatter":{"title":"Apple이 새로 공개한 오픈소스 Swift 컬렉션 패키지!","category":"Swift","draft":false}},"next":{"fields":{"slug":"/Algorithms/2021-07-07-bubble-sort/"},"frontmatter":{"title":"Swift Bubble Sort(거품정렬)","category":"Algorithms","draft":false}}}}}