{"componentChunkName":"component---src-templates-blog-post-js","path":"/Algorithms/2021-07-08-insertion-sort/","result":{"data":{"site":{"siteMetadata":{"title":"Noah's Dev Log","author":"[SeungHyun]","siteUrl":"https://noah0316.github.io","comment":{"disqusShortName":"","utterances":"noah0316/noah0316.github.io"},"sponsor":{"buyMeACoffeeId":"q6PBeY92M"}}},"markdownRemark":{"id":"7e383dfd-5307-5a32-a786-4695f9ee0cc8","excerpt":"안녕하세요 Noah입니다 :) 이번 시간에도 이어서 Sorting 알고리즘 톺아보기 1부를 진행하도록 하겠습니다 😄 이번 시간에 살펴볼 Sorting 알고리즘은 Insertion Sort입니다. Insertion Sort 먼저 Insertion Sort가 데이터를 정렬하는 모습부터 먼저 살펴보겠습니다.  아직 코드와 정렬 순서를 살펴보지 않았기에 자세히는 알지는 못하지만, 점점 정렬되는 사이즈가 커짐을 알 수 있습니다. 위키백과에는 Insertion Sort…","html":"<p>안녕하세요 Noah입니다 :)</p>\n<p>이번 시간에도 이어서 <strong>Sorting 알고리즘 톺아보기 1부</strong>를 진행하도록 하겠습니다 😄</p>\n<p>이번 시간에 살펴볼 Sorting 알고리즘은 <strong>Insertion Sort</strong>입니다.</p>\n<h2 id=\"insertion-sort\" style=\"position:relative;\"><a href=\"#insertion-sort\" aria-label=\"insertion sort permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Insertion Sort</h2>\n<p>먼저 <strong>Insertion Sort</strong>가 데이터를 <strong>정렬하는 모습</strong>부터 먼저 살펴보겠습니다.<br>\n<br></p>\n<p align=\"center\">\n<img src=\"/9ce56fa906ecc71adb5110c7fc9797a0/1.gif\" width=\"300\">\n</p><center>Insertion Sort</center>\n<p></p>\n<p>아직 코드와 정렬 순서를 살펴보지 않았기에 자세히는 알지는 못하지만,<br>\n점점 <strong>정렬되는 사이즈가 커짐</strong>을 알 수 있습니다.</p>\n<p>위키백과에는 <strong>Insertion Sort</strong>가 다음과 같이 <strong>정의</strong>되어있습니다.</p>\n<blockquote>\n<p>”<strong>삽입 정렬</strong>(揷入整列, insertion sort)은 자료 배열의 모든 요소를<br>\n앞에서부터 차례대로 이미 정렬된 배열 부분과 비교하여, 자신의 위치를 찾아 삽입함으로써<br>\n정렬을 완성하는 <a href=\"https://ko.wikipedia.org/wiki/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">알고리즘</a>이다.”</p>\n</blockquote>\n<p><strong>Insertion Sort</strong>는 이미 <strong>정렬이 완료된 배열을 운영</strong>하며 해당 <strong>배열의 크기</strong>를<br>\n<strong>한 칸씩 늘려</strong>가며 정렬을 진행합니다.</p>\n<p>다시 말해 <strong>Insertion Sort</strong>는 <strong>정렬이 완료된 배열</strong>에 <strong>element를 삽입</strong>하여<br>\n삽입된 element와 <strong>배열에 있는 element</strong>와 <strong>크기를 비교</strong>하여 <strong>자신의 자리</strong>를 <strong>찾는</strong> 알고리즘입니다.</p>\n<p>또한 <strong>마지막 element가 삽입</strong>될 때까지 어떤 element가 삽입될지 알 수 없기에<br>\nelement의 위치는 <strong>마지막 element까지</strong> <strong>정렬된 이후</strong>에 <strong>최종 위치</strong>가 <strong>확정</strong>됩니다.</p>\n<p><strong>Insertion Sort</strong>를 <strong>Swift</strong>로 구현해보도록 하겠습니다.</p>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">insertionSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> array<span class=\"token punctuation\">:</span> <span class=\"token keyword\">inout</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> index <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>array<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> currentIndex <span class=\"token operator\">=</span> index\n        <span class=\"token keyword\">while</span> currentIndex <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> array<span class=\"token punctuation\">[</span>currentIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">[</span>currentIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n            array<span class=\"token punctuation\">.</span><span class=\"token function\">swapAt</span><span class=\"token punctuation\">(</span>currentIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> currentIndex<span class=\"token punctuation\">)</span>\n            currentIndex <span class=\"token operator\">-</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token function\">insertionSort</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>array<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [1, 2, 3, 4, 5, 6, 7, 8]</span></code></pre></div>\n<p>위의 <code class=\"language-text\">array</code>가 정렬되는 모습은 다음과 같습니다.</p>\n<p align=\"center\">\n<img src=\"/6e67d1c722106442b422ee53e98575b3/2.gif\" width=\"300\">\n</p><center>Simulation</center>\n<p></p>\n<p><strong>Outer loop</strong>를 <strong>순회</strong>할 때마다 <strong>정렬된 array의 size</strong>가 <strong>1씩 커짐</strong>을 알 수 있습니다.</p>\n<h4 id=\"insertion-sort-정렬-순서\" style=\"position:relative;\"><a href=\"#insertion-sort-%EC%A0%95%EB%A0%AC-%EC%88%9C%EC%84%9C\" aria-label=\"insertion sort 정렬 순서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Insertion Sort 정렬 순서</h4>\n<ol>\n<li><strong>Outer Loop</strong>를 통해 <strong>현재 index</strong>를 <strong>부여</strong>받는다.</li>\n<li><strong>Inner Loop</strong>의 <strong>조건</strong> <strong>현재 index가 0이 아니고</strong>,<br>\n<strong>현재 index의 element</strong>와 <strong>현재 index 왼쪽</strong>에 있는 <strong>element</strong>와 <strong>대소 비교 후</strong><br>\n왼쪽에 위치한 element가 <strong>더 크다면</strong> 위치를 <strong>swap</strong>하고 <strong>현재 index</strong>를 <strong>index - 1</strong>로 <strong>업데이트</strong>하여<br>\n<strong>배열의 왼쪽</strong>으로 <strong>이동</strong>한다.</li>\n<li>만약 <strong>2번 조건을 충족</strong>하지 <strong>않으면</strong> 이미 <strong>정렬된 상태</strong>라 <strong>판정</strong>하고 Inner Loop를 순회하지 않는다.</li>\n</ol>\n<h4 id=\"순회-범위\" style=\"position:relative;\"><a href=\"#%EC%88%9C%ED%9A%8C-%EB%B2%94%EC%9C%84\" aria-label=\"순회 범위 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>순회 범위</h4>\n<p><strong>Outer loop</strong>의 순회 범위 : 1 to 배열 길이</p>\n<p><strong>Inner loop</strong>의 순회 범위 : 현재 index > 0 &#x26;&#x26; 배열[현재 index] &#x3C; array[현재 index - 1]이라면<br>\n<strong>최선의 경우</strong> : 정렬된 array의 마지막 element보다 삽입되는 element가 더 크다면<br>\n정렬이 완료되었다 판정하여 종료.</p>\n<p><strong>최악의 경우</strong> : 정렬된 array의 모든 element보다 삽입되는 element가 더 작다면<br>\n정렬된 배열의 index 0번까지 가며 Swap 진행</p>\n<p>다음으로 <strong>Insertion Sort</strong>의 <strong>시간복잡도</strong>를 살펴보도록 하겠습니다.</p>\n<ul>\n<li>Best : O(n)</li>\n<li>Worst : O(n^2)</li>\n<li>Average : O(n^2)</li>\n</ul>\n<p><strong>최선의 경우</strong> O(n), <strong>최악, 평균</strong>은 O(n^2)의 <strong>시간복잡도</strong>가 나옴을 알 수 있습니다.</p>\n<h4 id=\"swap을-하지-않고-구현하는-방법\" style=\"position:relative;\"><a href=\"#swap%EC%9D%84-%ED%95%98%EC%A7%80-%EC%95%8A%EA%B3%A0-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"swap을 하지 않고 구현하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Swap을 하지 않고 구현하는 방법</h4>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">insertionSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> array<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> sortedArray <span class=\"token operator\">=</span> array\n    <span class=\"token keyword\">for</span> index <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>sortedArray<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> currentIndex <span class=\"token operator\">=</span> index\n        <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> sortedArray<span class=\"token punctuation\">[</span>currentIndex<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">while</span> currentIndex <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> temp <span class=\"token operator\">&lt;</span> sortedArray<span class=\"token punctuation\">[</span>currentIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n            sortedArray<span class=\"token punctuation\">[</span>currentIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sortedArray<span class=\"token punctuation\">[</span>currentIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            currentIndex <span class=\"token operator\">-</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token punctuation\">}</span>\n        sortedArray<span class=\"token punctuation\">[</span>currentIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> sortedArray\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\narray <span class=\"token operator\">=</span> <span class=\"token function\">insertionSort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [1, 2, 3, 4, 5, 6, 7, 8]</span></code></pre></div>\n<p><strong>Swap</strong>을 <strong>하지 않는다면</strong> 다음과 같이 구현할 수 있습니다.</p>\n<ol>\n<li><strong>Outer Loop</strong>를 통해 <strong>현재 index</strong>를 <strong>부여</strong>받는다.</li>\n<li><strong>temp</strong>라는 <strong>임시 변수</strong>에 <strong>현재 index</strong>의 <strong>element</strong>를 임시 변수에 <strong>저장</strong>한다.</li>\n<li>\n<p><strong>Inner Loop</strong>의 <strong>조건을 만족</strong>한다면 <strong>현재 index</strong>의 <strong>element</strong>를 <strong>왼쪽에 있는</strong> <strong>element</strong>로 <strong>덮어씌운</strong>다.</p>\n<p><strong>만족하지 않는다면 5번</strong>으로 간다.</p>\n</li>\n<li><strong>현재 index</strong>를 index - 1로 <strong>업데이트</strong>하여 배열의 왼쪽으로 이동한다.</li>\n<li><strong>Inner Loop</strong>의 조건을 만족할 때까지 <strong>3, 4번 반복</strong></li>\n<li><strong>Inner Loop</strong>를 빠져나온다면 <strong>temp에 임시로 저장</strong>해두었던 변수를 <strong>현재 index에 저장</strong>합니다.</li>\n</ol>\n<br>\n<p>여기까지 <strong>Sorting 알고리즘 톺아보기 1부 Insertion Sort</strong>였습니다 😄</p>\n<p>혹시 제가 잘못 알고 있는 부분이 있거나, 오타 혹은 궁금한 점 있으시면 댓글로 알려주시면 감사하겠습니다!!😎<br>\n<br></p>\n<blockquote>\n<p>참고</p>\n<ul>\n<li><a href=\"https://github.com/raywenderlich/swift-algorithm-club/tree/master/Insertion%20Sort\">Raywenderlich Swift Algorithm Club</a></li>\n<li><a href=\"https://ko.wikipedia.org/wiki/%EC%82%BD%EC%9E%85_%EC%A0%95%EB%A0%AC\">위키 백과 삽입 정렬</a></li>\n</ul>\n</blockquote>\n<blockquote>\n<p>이미지 출처</p>\n<ul>\n<li><a href=\"https://commons.wikimedia.org/wiki/File:Insertion_sort_animation.gif\">삽입 정렬 애니메이션</a></li>\n<li><a href=\"https://upload.wikimedia.org/wikipedia/commons/0/0f/Insertion-sort-example-300px.gif\">삽입 정렬 시뮬레이션</a></li>\n</ul>\n</blockquote>","frontmatter":{"title":"Insertion Sort(삽입정렬)","date":"July 08, 2021"}}},"pageContext":{"slug":"/Algorithms/2021-07-08-insertion-sort/","previous":{"fields":{"slug":"/Algorithms/2021-07-07-bubble-sort/"},"frontmatter":{"title":"Bubble Sort(거품정렬)","category":"Algorithms","draft":false}},"next":{"fields":{"slug":"/Algorithms/2021-07-16-merge-sort(합병정렬)/"},"frontmatter":{"title":"Merge Sort(합병정렬)","category":"Algorithms","draft":false}}}}}