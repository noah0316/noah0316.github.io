{"componentChunkName":"component---src-templates-blog-post-js","path":"/iOS/ios-어플리케이션의-entrypoint/","result":{"data":{"site":{"siteMetadata":{"title":"Noah's Dev Log","author":"[SeungHyun]","siteUrl":"https://noah0316.github.io","comment":{"disqusShortName":"","utterances":"noah0316/noah0316.github.io"},"sponsor":{"buyMeACoffeeId":"noah0316"}}},"markdownRemark":{"id":"fa0f0306-a678-5594-903b-be3de88bc039","excerpt":"안녕하세요 Noah입니다 :) 오늘은 iOS앱의 진입점(Entry Point)에 대해 알아보며, 기본적인 앱의 구조에 대해 살펴보도록 하겠습니다😃 Entry Point (진입점) 프로그램 실행은 프로그래밍 언어나 운영체제 등에 의해 정의된 관용명을 통한, 지정된 이름으로 시작될 수 있다. 많은 언어에서(특히 C) 이 지정된 이름은 이라고 불리는 함수이다. 결과적으로 엔트리 포인트는 main 함수이라고 불린다. - 위키백과 - C…","html":"<p>안녕하세요 Noah입니다 :) 오늘은 iOS앱의 진입점(Entry Point)에 대해 알아보며,</p>\n<p>기본적인 앱의 구조에 대해 살펴보도록 하겠습니다😃</p>\n<h2 id=\"entry-point-진입점\" style=\"position:relative;\"><a href=\"#entry-point-%EC%A7%84%EC%9E%85%EC%A0%90\" aria-label=\"entry point 진입점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Entry Point (진입점)</h2>\n<blockquote>\n<p>프로그램 실행은 프로그래밍 언어나 운영체제 등에 의해 정의된 관용명을 통한, 지정된 이름으로 시작될 수 있다. 많은 언어에서(특히 C) 이 지정된 이름은 <code class=\"language-text\">main</code>이라고 불리는 함수이다. 결과적으로 엔트리 포인트는 <strong>main 함수</strong>이라고 불린다. - 위키백과 -</p>\n</blockquote>\n<p>C를 자주 접해 보신 분이라면 <code class=\"language-text\">main()</code> 함수가 익숙하실텐데요,</p>\n<p>프로그램의 시작 포인트가 되는 부분을 엔트리 포인트(진입점)라고 합니다.</p>\n<p>자바에서는 스태틱 메소드인 <code class=\"language-text\">main()</code>이 엔트리 포인트로 사용되고 있으며, react 프로젝트의 경우 src/index.js가 엔트리 포인트로 사용되고 있습니다.</p>\n<p>그럼 우리가 공부하고 있는 iOS 어플리케이션에서는 어디가 엔트리 포인트일까요?</p>\n<p>이를 알아보기 앞서 이해를 돕기 위해 iOS 어플리케이션을 개발하기 위해 사용하는 언어 <code class=\"language-text\">Swift</code> 이전에 사용했던,</p>\n<p>‘Objective-C’의 예를 살펴보도록 하겠습니다.</p>\n<p>Objective-C는 C언어에 뿌리를 두고 있기 때문에, Objective-C로 만들어진 iOS 어플리케이션의 엔트리 포인트는 역시 <code class=\"language-text\">main()</code>함수입니다.</p>\n<p>Objective-C로 만들어진 iOS 어플리케이션에서 <code class=\"language-text\">main()</code>함수가 하는 일은 다음과 같습니다.</p>\n<p><code class=\"language-text\">main()</code>함수는 AppDelegate 클래스를 이용해 <code class=\"language-text\">UIApplicationMain()</code>함수를 호출하고, 결과로 <code class=\"language-text\">UIApplication</code> 객체를 반환합니다.</p>\n<p>여기서 <code class=\"language-text\">UIApplication</code> 객체는 도대체 어떤일을 하는 객체일까요?</p>\n<p>애플 개발자 문서를 한번 찾아봅시다!</p>\n<blockquote>\n<p>Every iOS app has exactly one instance of <code class=\"language-text\">UIApplication</code> (or, very rarely, a subclass of <code class=\"language-text\">UIApplication</code>). When an app launches, the system calls the <code class=\"language-text\">[UIApplicationMain(_:_:_:_:)](https://developer.apple.com/documentation/uikit/1622933-uiapplicationmain)</code> function. Among its other tasks, this function creates a singleton <code class=\"language-text\">UIApplication</code> object that you access using <code class=\"language-text\">[shared](https://developer.apple.com/documentation/uikit/uiapplication/1622975-shared)</code>.</p>\n</blockquote>\n<ul>\n<li>\n<p>apple developer documentation</p>\n<blockquote>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>모든 iOS app은 단 한개의 UIApplication 인스턴스가 있습니다.(또는 매우 드물게, UIApplication의 하위클래스)\n앱이 시작되면 시스템은 <code class=\"language-text\">UIApplicationMain(_:_:_:_:)</code>함수를 호출합니다.\n이 함수는 다른 task들 중에서 singleton <code class=\"language-text\">UIApplication</code> 객체를 만들고,\nshared 클래스 메소드를 이용해 접근합니다.</p>\n</blockquote>\n<ul>\n<li>\n<p>애플 개발자 문서</p>\n<blockquote>\n</blockquote>\n</li>\n</ul>\n<p>이게 무슨 말일까요?</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/5bbf353e-5943-45cc-bcd8-6d16c0925ca2/Screen_Shot_2021-10-25_at_1.47.46_AM.png\" alt=\"Screen Shot 2021-10-25 at 1.47.46 AM.png\"></p>\n<p>먼저 singleton이란,\n이름만 들어도 무시무시한 Gang of Four형님들의 디자인 패턴에 나오는 소프트웨어 디자인 패턴입니다.</p>\n<blockquote>\n<p>Singleton Pattern\nsingleton 패턴은 <a href=\"https://terms.naver.com/entry.naver?docId=3532992&#x26;ref=y\">객체</a>의 생성과 관련된 패턴으로서 특정 <a href=\"https://terms.naver.com/entry.naver?docId=3532993&#x26;ref=y\">클래스</a>의 객체가 오직 한 개만 존재하도록 보장한다. 즉 클래스의 객체를 하나로 제한한다. 프로그램에서 이런 개념이 필요할 때는 언제일까? 프린터 드라이버의 예를 들어보자.</p>\n</blockquote>\n<blockquote>\n<p>여러 컴퓨터에서 프린터 한 대를 공유하는 경우, 한 대의 컴퓨터에서 프린트하고 있을 때 다른 컴퓨터가 프린트 명령을 내려도 현재 프린트하는 작업을 마치고 그다음 프린트를 해야지 두 작업이 섞여 나오면 문제가 될 것이다. 즉 여러 클라이언트(컴퓨터)가 동일 객체(공유 프린터)를 사용하지만 한 개의 객체(프린트 명령을 받은 출력물)가 유일하도록 상위 객체가 보장하지 못한다면 singleton 패턴을 적용해야 한다. 이처럼 동일한 자원이나 데이터를 처리하는 객체가 불필요하게 여러 개 만들어질 필요가 없는 경우에 주로 사용한다.</p>\n</blockquote>\n<p><strong>[[네이버 지식백과]</strong>](<a href=\"https://terms.naver.com/imageDetail.naver?docId=3532960&#x26;imageUrl=https%3A%2F%2Fdbscthumb-phinf.pstatic.net%2F4666_000_1%2F20161005133620287_LKK64237F.jpg%2Fka37_130_i1.jpg%3Ftype%3Dm4500_4500_fst_n%26wm%3DY\">https://terms.naver.com/imageDetail.naver?docId=3532960&#x26;imageUrl=https%3A%2F%2Fdbscthumb-phinf.pstatic.net%2F4666_000_1%2F20161005133620287_LKK64237F.jpg%2Fka37_130_i1.jpg%3Ftype%3Dm4500_4500_fst_n%26wm%3DY</a>) <a href=\"https://terms.naver.com/entry.naver?docId=3532960\">singleton 패턴</a> (쉽게 배우는 소프트웨어 공학, 2015. 11. 30., 김치수)</p>\n<p>모든 iOS app은 ‘단 한개’의 UIApplication 인스턴스를 가지는데요,\n(인스턴스를 편의상 객체로 표현하겠습니다.)</p>\n<p>UIApplication 객체는 앱의 본체라고 할 수 있는 객체입니다.\n또한 iOS app에서 생성되는 객체가 1개임을 보장받는 싱글톤 객체이며,</p>\n<p>UIApplication 객체는 이벤트 루프나, 앱 동작을 관리할 뿐 아니라, iOS에서 실행되는 앱의 중앙 컨트롤 타워격의 역할을 합니다.</p>\n<p>자 그러면 UIApplication 객체를 생성하는 <code class=\"language-text\">UIApplciationMain(_:_:_:_)</code> 함수에 대해 알아볼까요?</p>\n<h2 id=\"code-classlanguage-textuiapplciationmain____code\" style=\"position:relative;\"><a href=\"#code-classlanguage-textuiapplciationmain____code\" aria-label=\"code classlanguage textuiapplciationmain____code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">UIApplciationMain(_:_:_:_)</code></h2>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">UIApplicationMain</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> argc<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int32</span><span class=\"token punctuation\">,</span>\n                     <span class=\"token number\">_</span> argv<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UnsafeMutablePointer</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">UnsafeMutablePointer</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">CChar</span><span class=\"token operator\">></span><span class=\"token operator\">?</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n                     <span class=\"token number\">_</span> principalClassName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n                     <span class=\"token number\">_</span> delegateClassName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span></code></pre></div>\n<h3 id=\"파라미터\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0\" aria-label=\"파라미터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파라미터</h3>\n<blockquote>\n<ul>\n<li><strong><code class=\"language-text\">argc</code></strong>\nThe count of arguments in <code class=\"language-text\">argv</code>; this usually is the corresponding parameter to <code class=\"language-text\">main</code>.</li>\n</ul>\n</blockquote>\n<ul>\n<li><strong><code class=\"language-text\">argv</code></strong>\nA variable list of arguments; this usually is the corresponding parameter to <code class=\"language-text\">main</code>.</li>\n<li><strong><code class=\"language-text\">principalClassName</code></strong>\nThe name of the <code class=\"language-text\">[UIApplication](https://developer.apple.com/documentation/uikit/uiapplication)</code> class or subclass. If you specify <code class=\"language-text\">nil</code>, <code class=\"language-text\">UIApplication</code> is assumed.</li>\n<li><strong><code class=\"language-text\">delegateClassName</code></strong>\nThe name of the class from which the application delegate is instantiated. If <code class=\"language-text\">principalClassName</code> designates a subclass of <code class=\"language-text\">UIApplication</code>, you may designate the subclass as the delegate; the subclass instance receives the application-delegate messages. Specify <code class=\"language-text\">nil</code> if you load the delegate object from your application’s main nib file.</li>\n<li>\n<p>apple developer documentation</p>\n<blockquote>\n</blockquote>\n</li>\n</ul>\n<p><code class=\"language-text\">UIApplciationMain(_:_:_:_)</code> 함수는 총 4개의 파라미터를 가지는데요,</p>\n<p>우리는 main에 해당하는 파라미터인 argc, argv보다는</p>\n<p><code class=\"language-text\">principalClassName</code>, <code class=\"language-text\">delegateClassName</code> 에 집중해 보도록 하겠습니다.</p>\n<p><code class=\"language-text\">principalClassName</code> 은 <code class=\"language-text\">UIapplication</code> 의 하위클래스입니다. nil을 지정할 경우, <code class=\"language-text\">UIApplication</code> 으로 가정됩니다.</p>\n<p><code class=\"language-text\">principalClassName</code> 은 <code class=\"language-text\">UIApplication</code>을 서브클래싱 하는 경우 , 지정해주는데요, 중대한 목적이 있다면 서브 클래싱을 하지만 하기도 어렵고, 굳이 할 필요성을 아직까진 느끼지 못해 필요성을 느끼게 된다면 포스팅을 통해 한번 알아보도록 하겠습니다.</p>\n<p><code class=\"language-text\">delegateClassName</code> 은 Application Delegate가 인스턴스화 되는 클래스의 이름입니다. (밑에서 알아볼테니 지금은 넘어가셔도 됩니다!)</p>\n<p><code class=\"language-text\">principalClassName</code> 이 <code class=\"language-text\">UIApplication</code> 의 하위 클래스를 지정하는 경우, 해당 하위 클래스를 delegate로 지정할 수 있습니다. 하위클래스 인스턴스는 application-delegate 메시지를 받습니다.\n앱의 main nib file에서 delegate 객체를 load하는 경우 nil을 지정합니다.</p>\n<p>자 그럼 <code class=\"language-text\">delegateClassName</code>에는 Application Delegate가 인스턴스화 되는 클래스의 이름이라고 하는데요,</p>\n<h3 id=\"application-delegate가-뭘까요\" style=\"position:relative;\"><a href=\"#application-delegate%EA%B0%80-%EB%AD%98%EA%B9%8C%EC%9A%94\" aria-label=\"application delegate가 뭘까요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Application Delegate가 뭘까요?</h3>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/da1825a3-16fc-4b0e-a165-38476558b008/Untitled_2.png\" alt=\"Untitled 2.png\"></p>\n<p>iOS 어플리케이션은 기본적으로 우리가 건드릴 수 있는 영역과 우리가 건드릴 수 없는 시스템 프레임워크 영역으로 분리됩니다.</p>\n<p>우리는 커스텀 가능한 영역에서 코드를 작성해 우리가 원하는 기능과 유저 인터페이스를 구현해 우리만의 어플리케이션을 만들 수 있습니다. ⇒ 이 부분이 바로 우리가 하고 있는 작업이죠!</p>\n<p>우리가 만들 앱은 다양한 기능이 있을 테지만 시스템에서 일어나는 일들을 알 수 없으면 우리가 원하는 기능을 구현할 수 없겠죠? ⇒ 예를 들면 앱이 launch되는 시점, 종료되는 시점을 알 수 없다던가..등등 시스템에서 일어나는 일들을 알 수 없다면 우리가 만들 앱에 상당한 제약이 많이 생기겠죠??</p>\n<p>그럼 우리가 만들 앱에서 시스템에서 일어나는 일들을 알아내기 위해선 어떻게 해야할까요?</p>\n<p>뭔가 생각나지 않으시나요? 아까 위에서 우리 봤었죠..? 그죠..? 하하</p>\n<p>다시 가져와봤습니다 ^__^</p>\n<blockquote>\n<p><code class=\"language-text\">UIApplication</code> 객체는 이벤트 루프나, 앱 동작을 관리할 뿐 아니라, iOS에서 실행되는 앱의 중앙 컨트롤 타워격의 역할을 합니다.</p>\n</blockquote>\n<p><code class=\"language-text\">UIApplication</code>객체는 핵심적인 일을 담당하고 있어 하는 일이 많기도하고, 아무곳에나 잘못접근하면 어플리케이션에 치명적인 문제가 생기겠죠?</p>\n<p>그래서<code class=\"language-text\">UIApplication</code> 은 <code class=\"language-text\">UIApplication</code> 으로 부터 약간의 권한을 부여받은 Application Delegate라는 대리인을 내세워 커스텀 코드와 시스템과의 상호작용을 담당하게 합니다.</p>\n<p>다음 그림을 보면 이해가 더 잘 가실거예요!!</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3483570e-6392-4c50-bc62-886e5928c956/smfLy.png\" alt=\"smfLy.png\"></p>\n<p>그림을 보면 커스텀 객체인 Application Delegate가 <code class=\"language-text\">UIApplication</code>으로 부터 이벤트를 받고,</p>\n<p>application내의 다양한 요소들과 상호작용하는 모습을 볼 수 있네요!!</p>\n<p>우리는 Application Delegate를 통해 시스템의 다양한 이벤트를 우리의 코드와 상호작용시킬 수 있습니다!!</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6dc7f8b6-0d6e-49c9-ae86-d5c159edad4f/Screen_Shot_2021-10-25_at_4.18.55_AM.png\" alt=\"Screen Shot 2021-10-25 at 4.18.55 AM.png\"></p>\n<p>우리 이제 Application Delegate라는 친구가 어떤 역할을 하는지 알았죠?</p>\n<h2 id=\"자-다시-본론으로-돌아와서\" style=\"position:relative;\"><a href=\"#%EC%9E%90-%EB%8B%A4%EC%8B%9C-%EB%B3%B8%EB%A1%A0%EC%9C%BC%EB%A1%9C-%EB%8F%8C%EC%95%84%EC%99%80%EC%84%9C\" aria-label=\"자 다시 본론으로 돌아와서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자 다시 본론으로 돌아와서</h2>\n<p><code class=\"language-text\">UIApplication</code>객체를 생성하는<code class=\"language-text\">UIApplciationMain(_:_:_:_)</code> 함수에서</p>\n<p><code class=\"language-text\">UIApplication</code> 객체 에서 application delegate가 인스턴스화 되는 클래스의 이름을 <code class=\"language-text\">delegateClassName</code>이라고 했는데요 ,</p>\n<p>그 클래스가 바로</p>\n<p>우리가 iOS 프로젝트를 생성할 때마다 있었던 바로</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f2f50df3-6058-40c2-ad4c-d27e5e9e58cc/Screen_Shot_2021-10-24_at_9.08.52_PM.png\" alt=\"Screen Shot 2021-10-24 at 9.08.52 PM.png\"></p>\n<p>요 친구 입니다. <code class=\"language-text\">AppDelegate.swift</code></p>\n<p><code class=\"language-text\">main()</code> 함수가 실행되어<code class=\"language-text\">UIApplciationMain(_:_:_:_)</code> 함수를 호출해</p>\n<p><code class=\"language-text\">UIApplication</code>객체를 생성할 때 “내가 권한을 위임 받고 싶은 친구는 이친구야~’ 하고 AppDelegate Class를 <code class=\"language-text\">UIApplication</code> 객체와 연결해주는 것입니다.</p>\n<p>이 친구의 이름을 한번 바꿔볼까요?</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4bbfaa9d-7f19-405e-8502-fcdc6438fe69/Screen_Shot_2021-10-25_at_5.02.58_PM.png\" alt=\"Screen Shot 2021-10-25 at 5.02.58 PM.png\"></p>\n<p>AppDelegate라고 되어있던 클래스의 이름을 Noah로 바꾸고,</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">application</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> application<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UIApplication</span><span class=\"token punctuation\">,</span> didFinishLaunchingWithOptions launchOptions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">UIApplication</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">LaunchOptionsKey</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Any</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Bool</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Override point for customization after application launch.</span>\n\t\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"내가 Application Delegate다!!!\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이곳에 <code class=\"language-text\">print(&quot;내가 Application Delegate다!!!&quot;)</code>를 추가해주었는데요,</p>\n<p>이 함수는 앱의 실행완료 직전에 호출되는 메소드인데요,</p>\n<p>콘솔부분에 정상적으로 <code class=\"language-text\">내가 Application Delegate다!!!</code> 라는 메시지가 정상적으로 호출되는 것을 확인할 수 있습니다.</p>\n<p>위 상황을 다시 복습해보면 이 상황에서는</p>\n<p><code class=\"language-text\">main()</code> 함수가 실행되어<code class=\"language-text\">UIApplciationMain(_:_:_:_)</code> 함수를 호출해</p>\n<p><code class=\"language-text\">UIApplication</code>객체를 생성할 때 “내가 권한을 위임받고 싶은 친구는 Noah라는 친구야~’ 하고 Noah Class를 Application Delegate로 <code class=\"language-text\">UIApplication</code> 객체와 연결해주는 것입니다.</p>\n<p>자 정리해보면 다음과 같습니다.</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/5062e426-3ba6-4a03-9bb2-bcef1f8f986c/81951811-95971000-9640-11ea-8520-ebf41a283665.png\" alt=\"81951811-95971000-9640-11ea-8520-ebf41a283665.png\"></p>\n<h3 id=\"ios앱의-실행과정\" style=\"position:relative;\"><a href=\"#ios%EC%95%B1%EC%9D%98-%EC%8B%A4%ED%96%89%EA%B3%BC%EC%A0%95\" aria-label=\"ios앱의 실행과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>iOS앱의 실행과정</h3>\n<ol>\n<li>앱이 실행되어 <code class=\"language-text\">main()</code> 함수가 실행된다.</li>\n<li><code class=\"language-text\">main()</code> 함수에서 UIKit의 <code class=\"language-text\">UIApplciationMain(_:_:_:_)</code> 함수를 호출한다.</li>\n<li><code class=\"language-text\">UIApplicationMain()</code> 함수는 <code class=\"language-text\">UIApplication</code> 객체를 생성하는 역할을 한다.</li>\n<li><code class=\"language-text\">UIApplication</code> 객체는 info.plist 파일을 바탕으로 앱에 필요한 데이터와 객체를 로드한다.</li>\n<li>Application Delegate 객체를 생성하고, <code class=\"language-text\">UIApplication</code> 객체와 연결한다.</li>\n<li>이벤트 루프를 만드는 등 실행에 필요한 준비를 진행한다.</li>\n<li>실행 완료 직전, AppDelegate의 <code class=\"language-text\">application(_:didFinishLaunchingWithOptions:)</code> 메소드를 호출한다.</li>\n</ol>\n<p>자 그러면, Swift로 iOS 앱을 개발할 때는 어떨까요?</p>\n<p>Swift는 <code class=\"language-text\">main()</code>함수가 따로 없죠?</p>\n<p>따라서 Swift 5.3 버전 이전 까지는 Application Delegate역할을 할 클래스에<code class=\"language-text\">@UIApplicationMain</code> 라는 프로퍼티 래퍼를 작성해 iOS시스템이 앱을 실행할 때 이 프로퍼티 래퍼를 찾아 해당 클래스를 Application Delegate로 지정했었습니다.</p>\n<p>이렇게 말이죠.</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/18c745f3-4e1e-44e8-804c-51033570a0b8/Screen_Shot_2021-10-25_at_4.41.25_AM.png\" alt=\"Screen Shot 2021-10-25 at 4.41.25 AM.png\"></p>\n<p>위의 iOS앱의 실행과정 1~5번까지의 과정을 <code class=\"language-text\">@UIApplicationMain</code> 프로퍼티 래퍼 표기로 대체합니다.</p>\n<h2 id=\"swift-53-부터는\" style=\"position:relative;\"><a href=\"#swift-53-%EB%B6%80%ED%84%B0%EB%8A%94\" aria-label=\"swift 53 부터는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Swift 5.3 부터는</h2>\n<p><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0281-main-attribute.md\">swift-evolution/0281-main-attribute.md at master · apple/swift-evolution</a></p>\n<p><code class=\"language-text\">@main</code> 이라는 attribute가 생겼는데요,</p>\n<blockquote>\n<p>원래 Swift로 만들어진 프로젝트는 <code class=\"language-text\">@UIApplicationMain</code> 혹은 <code class=\"language-text\">@NSApplicationMain</code> 말고는 따로 진입점을 명시할 수 없고 최상단에 적힌 코드가 동작하는 방식이었습니다.</p>\n</blockquote>\n<p><code class=\"language-text\">@main</code>이라는 attribute를 통해 Swift 프로그램의 진입점을 지정할 수 있게 되었습니다.</p>\n<p>class나 struct에 <code class=\"language-text\">@main</code> 이 명시된 경우 <code class=\"language-text\">static func main()</code> 메서드가 실제 진입점이 되고,(그렇다면 <code class=\"language-text\">static func main()</code>을 작성해주어야겠죠?)</p>\n<p>이와 마찬가지로</p>\n<p><code class=\"language-text\">UIAppDelegate</code>내부에 들어가보면</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/29d783bb-e2a8-4f59-94e1-f15db009ecd1/Screen_Shot_2021-10-18_at_3.25.07_AM.png\" alt=\"Screen Shot 2021-10-18 at 3.25.07 AM.png\"></p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0de080ac-4b40-4d2a-9eda-bc482880f87e/Screen_Shot_2021-10-25_at_4.56.47_AM.png\" alt=\"Screen Shot 2021-10-25 at 4.56.47 AM.png\"></p>\n<p>다음과 같이 <code class=\"language-text\">static func main()</code>이 구현되어 이곳이 진입점이 되어 iOS앱의 실행과정 1~5번까지의 과정을 수행합니다.</p>\n<h2 id=\"scene-delegate\" style=\"position:relative;\"><a href=\"#scene-delegate\" aria-label=\"scene delegate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scene Delegate</h2>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e3cfa0c2-48fa-489d-b4a5-a2e2a4b3b8ef/bfb7257a329da47e9b8f4ca4069c609e82ff15158c1fa6b481a443d223d196af25862529e739e6359c300ce07333ecfb4ab6baab196f9e5eea4f497365c89bfa68288c3bb9188d9dd15c8d06bc7accbb758dd13aa039ceb8f0c616d64ba4bbc8.png\" alt=\"bfb7257a329da47e9b8f4ca4069c609e82ff15158c1fa6b481a443d223d196af25862529e739e6359c300ce07333ecfb4ab6baab196f9e5eea4f497365c89bfa68288c3bb9188d9dd15c8d06bc7accbb758dd13aa039ceb8f0c616d64ba4bbc8.png\"></p>\n<p>iOS 13부터는 Scene Delegate라는 개념이 도입되었는데요, 이에 대해서는 Application LifeCycle 관련 포스트에서 풀어보도록 하겠습니다!!</p>\n<p>자, 여기까지 iOS App의 EntryPoint에 대해 알아보았습니다!</p>\n<p>다들 잘 이해가 가셨길 바라면서, 다음에는 Application의 Life-Cycle을 톺아보도록 하겠습니다!</p>\n<p>날씨가 춥습니다, 다들 감기조심하세요!!</p>\n<p>혹시 제가 잘못 알고 있는 부분이 있거나, 오타 혹은 궁금한 점 있으시면 댓글로 알려주시면 감사하겠습니다!! 😎</p>\n<blockquote>\n<p>이미지 출처</p>\n<ul>\n<li><a href=\"https://www.imbc.com/broad/tv/ent/challenge/main.html\">MBC 무한도전</a></li>\n<li><a href=\"https://developer.apple.com/documentation/\">Apple Developer Documentation</a></li>\n</ul>\n</blockquote>\n<blockquote>\n<p>참고</p>\n<ul>\n<li><a href=\"https://developer.apple.com/documentation/\">Apple Developer Documentation</a></li>\n<li><a href=\"http://www.yes24.com/Product/Goods/60638047\">꼼꼼한 재은씨의 Swift 기본편</a></li>\n<li><a href=\"https://useyourloaf.com/blog/what-does-main-do-in-swift-5.3/\">What does @main do in Swift 5.3?</a></li>\n</ul>\n</blockquote>","frontmatter":{"title":"iOS 어플리케이션의 EntryPoint","date":"October 25, 2021"}}},"pageContext":{"slug":"/iOS/ios-어플리케이션의-entrypoint/","previous":{"fields":{"slug":"/Tools/2021-10-15-swiftlint-힙하게-사용하기(with-git-hook)/"},"frontmatter":{"title":"SwiftLint 힙하게 사용하기(with Git-Hook)","category":"Tools","draft":false}},"next":null}}}